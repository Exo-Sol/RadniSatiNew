[{"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js":"1","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js":"2","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js":"3","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js":"4","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js":"5","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js":"6","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js":"7","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\FirstPage.js":"8","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js":"9","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js":"10","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js":"11","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js":"12"},{"size":198,"mtime":1612353468344,"results":"13","hashOfConfig":"14"},{"size":1027,"mtime":1612882278662,"results":"15","hashOfConfig":"14"},{"size":5351,"mtime":1613041370492,"results":"16","hashOfConfig":"14"},{"size":2638,"mtime":1613041401678,"results":"17","hashOfConfig":"14"},{"size":364,"mtime":1612357701466,"results":"18","hashOfConfig":"14"},{"size":815,"mtime":1611830727444,"results":"19","hashOfConfig":"14"},{"size":815,"mtime":1612298379591,"results":"20","hashOfConfig":"14"},{"size":6474,"mtime":1613044368363,"results":"21","hashOfConfig":"14"},{"size":3712,"mtime":1613044259082,"results":"22","hashOfConfig":"14"},{"size":1989,"mtime":1612986874319,"results":"23","hashOfConfig":"14"},{"size":362,"mtime":1612983354825,"results":"24","hashOfConfig":"14"},{"size":1035,"mtime":1612985185677,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"lqlpn9",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js",[],["55","56"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js",["57"],"import React, { useState } from \"react\";\r\nimport FirstPage from \"./FirstPage\";\r\nimport SecondPage from \"./seconPage/SecondPage\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport SwipeableRoutes from \"react-swipeable-routes\";\r\n\r\nconst App = () => {\r\n  // to indicate change in added time to pase change notification to second ppage\r\n  const [change, setChange] = useState(false);\r\n\r\n  const onAddedTime = () => {\r\n    setChange(!change);\r\n  };\r\n  //  const FirstPage = <FirstPage onAddedTime={onAddedTime} />;\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <SwipeableRoutes>\r\n          <Route\r\n            path=\"/first\"\r\n            render={(props) => (\r\n              <FirstPage {...props} onAddedTime={onAddedTime} />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/second\"\r\n            render={(props) => <SecondPage {...props} change={change} />}\r\n          />\r\n        </SwipeableRoutes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js",["58","59"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport HList from \"../components/HList\";\r\n\r\nimport \"../styles/mainStyle.css\";\r\n\r\nimport PopUp from \"./PopUp\";\r\n\r\nconst DateNav = ({ catchData, curJob, catchD }) => {\r\n  const [clickCount, setClickCount] = useState(0);\r\n\r\n  //////////DATE FORMARING//////////////////////////\r\n  //////////////////////////////////////////////////\r\n  const formatDate = (count) => {\r\n    const dateObj = new Date(),\r\n      dayNames = [\"Ned\", \"Pon\", \"Uto\", \"Sri\", \"Cet\", \"Pet\", \"Sub\"];\r\n    if (clickCount !== 0) {\r\n      console.log(\"dohvaceno\");\r\n      dateObj.setDate(new Date().getDate() + count);\r\n    }\r\n\r\n    return {\r\n      year: dateObj.getFullYear(),\r\n      day: dateObj.getDate(),\r\n      month: dateObj.getMonth() + 1,\r\n      dayName: dayNames[dateObj.getDay()],\r\n    };\r\n  };\r\n  //////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedDay, setSelectedDay] = useState(formatDate());\r\n  ///////////////////////////////////////////////////////////////\r\n  const [workHours, setWorkHours] = useState(0);\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedTimes, setSelectedTimes] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n  });\r\n  //////////////////////////////////////////////////////////////\r\n  const [popUpState, setPopUpState] = useState(false);\r\n\r\n  ////////////////////////ANIMATION///////////////////////////////////////\r\n\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  // settin the displayed date <_> clicking day back or foward is hooked with useEffect to change state\r\n  //witch is date displayed visualy\r\n\r\n  useEffect(() => {\r\n    setSelectedDay(formatDate(clickCount));\r\n  }, [clickCount]);\r\n\r\n  const dayFoward = () => {\r\n    setClickCount((count) => count + 1);\r\n  };\r\n\r\n  const dayBack = () => {\r\n    setClickCount((count) => count - 1);\r\n  };\r\n\r\n  /////////////JSX variables/////////////////////////////////\r\n\r\n  const backArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayBack}>\r\n      arrow_back_ios\r\n    </span>\r\n  );\r\n\r\n  const fwdArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayFoward}>\r\n      arrow_forward_ios\r\n    </span>\r\n  );\r\n  /////////////////////////////////////////////////////////\r\n  const clickHour = (e) => {\r\n    if (!selectedTimes.startTime) {\r\n      setSelectedTimes({ ...selectedTimes, startTime: e.target.textContent });\r\n    } else if (!selectedTimes.endTime) {\r\n      // make unable to select end time lower than start time\r\n      if (parseInt(e.target.textContent) > parseInt(selectedTimes.startTime)) {\r\n        setSelectedTimes({ ...selectedTimes, endTime: e.target.textContent });\r\n      }\r\n    }\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      let derivedWorkHours = selectedTimes.endTime - selectedTimes.startTime;\r\n      setWorkHours(derivedWorkHours);\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [selectedTimes.endTime]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  const hoursChange = (e) => {\r\n    setWorkHours(e.target.value);\r\n  };\r\n\r\n  //////////////////////////////////\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (workHours > 24 || workHours < 0) {\r\n      alert(\"Netocno uneseni sati\");\r\n    } else if (workHours) {\r\n      catchData(selectedDay, workHours, selectedTimes);\r\n      setWorkHours(0);\r\n      setSelectedTimes({\r\n        startTime: null,\r\n        endTime: null,\r\n      });\r\n      /////////////////////////\r\n      setPopUpState(true);\r\n      setTimeout(() => {\r\n        setPopUpState(false);\r\n      }, 800);\r\n    }\r\n  };\r\n  /////////////////////////////////////////////\r\n  const clickDelete = () => {\r\n    setWorkHours(0);\r\n    setSelectedTimes({\r\n      startTime: null,\r\n      endTime: null,\r\n    });\r\n  };\r\n  ////////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <div className=\"popUpWrapper\">\r\n        {popUpState ? <PopUp curJob={curJob} /> : <div></div>}\r\n      </div>\r\n      <div className=\"dateNav\">\r\n        {backArrow}\r\n\r\n        <span id=\"animateDate\">{`${selectedDay.dayName}, ${selectedDay.day}/${selectedDay.month}`}</span>\r\n        {fwdArrow}\r\n      </div>\r\n      <div className=\"flexWrapNav\">\r\n        <input\r\n          type=\"number\"\r\n          className=\"inputField\"\r\n          name=\"workHours\"\r\n          placeholder=\"Radni sati\"\r\n          value={workHours}\r\n          onChange={hoursChange}\r\n          style={{ display: \"block\" }}\r\n        />\r\n        <br />\r\n        <div className=\"flexWrapButtons\">\r\n          <input\r\n            type=\"submit\"\r\n            onClick={onSubmit}\r\n            value=\"Save\"\r\n            id=\"save\"\r\n            className=\"buttons\"\r\n          />\r\n\r\n          <button id=\"delete\" onClick={clickDelete} className=\"buttons\">\r\n            Del\r\n          </button>\r\n        </div>\r\n        <div className=\"hourPad\">\r\n          <HList\r\n            clickHour={clickHour}\r\n            selectedTimes={selectedTimes}\r\n            catchD={catchD}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DateNav;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js",["60","61","62"],"import React, { useState } from \"react\";\r\nimport { useSpring, animated, useTransition } from \"react-spring\";\r\nimport \"../styles/mainStyle.css\";\r\n\r\nconst HList = ({ clickHour, selectedTimes, catchD }) => {\r\n  // const clickedBtn = (e) => {\r\n  //   clickHour\r\n  //   console.log(e.target.textContent);\r\n  // };\r\n\r\n  // create an array of jobe time stamps, for now\r\n  const arr = [];\r\n  ////////////////////////\r\n  const [displaySelector, changeDisplySelector] = useState(false);\r\n\r\n  /////////////////////////////ANIMATION///////////////////////////////////////\r\n  const props = useSpring({\r\n    config: { duration: 1250 },\r\n    opacity: 1,\r\n    from: { opacity: 0 },\r\n  });\r\n\r\n  const transitions = useTransition(displaySelector, null, {\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  });\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  const startStyle = {\r\n    backgroundColor: \"#5de6da\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const endStyle = {\r\n    backgroundColor: \"#ee3968\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const resetSyle = {\r\n    border: \"gray 1px solid\",\r\n    color: \"black\",\r\n    backgroundColor: \"#fafad2\",\r\n  };\r\n\r\n  for (let i = 7; i <= 24; i++) {\r\n    if (i == selectedTimes.startTime) {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={startStyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else if (i == selectedTimes.endTime) {\r\n      arr.push(\r\n        <h1 onClick={clickHour} className=\"numberList\" style={endStyle} key={i}>\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={resetSyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    }\r\n  }\r\n\r\n  const hClick = () => {\r\n    changeDisplySelector(!displaySelector);\r\n    catchD();\r\n  };\r\n\r\n  return displaySelector ? (\r\n    transitions.map(\r\n      ({ item, key, props }) =>\r\n        item && (\r\n          <animated.div className=\"hourSelect\" key={key} style={props}>\r\n            {arr}\r\n            <span\r\n              className=\"material-icons numberList hButton\"\r\n              onClick={hClick}\r\n              style={resetSyle}\r\n            >\r\n              eject\r\n            </span>\r\n          </animated.div>\r\n        )\r\n    )\r\n  ) : (\r\n    <span\r\n      className=\"material-icons numberList hButton\"\r\n      onClick={hClick}\r\n      style={resetSyle}\r\n    >\r\n      query_builder\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default HList;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js",["63","64"],"import React, { useState } from \"react\";\r\n\r\nconst DisplayThisMonthHours = ({ curJob }) => {\r\n  const dateObj = new Date();\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  const month = dateObj.getMonth() + 1;\r\n\r\n  let totalH = 0;\r\n  if (retriveArr && Array.isArray(retriveArr)) {\r\n    retriveArr.map((ele, ind) => {\r\n      if (ele.month === month && ele.job === curJob) {\r\n        totalH += ele.workHours;\r\n      }\r\n    });\r\n  } else if (retriveArr) {\r\n    totalH += retriveArr.workHours;\r\n  }\r\n\r\n  let stringTotalH = totalH.toString();\r\n  let lastChar = +stringTotalH.slice(-1);\r\n\r\n  return (\r\n    <div className=\"displInfoMain\">{`${totalH} ${\r\n      lastChar === 1 ? \"sat\" : \"sati\"\r\n    } u ${month} mj. (${curJob}) `}</div>\r\n  );\r\n};\r\n\r\nexport default DisplayThisMonthHours;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\FirstPage.js",["65","66"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js",["67","68","69","70","71","72"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":4,"column":42,"nodeType":"79","messageId":"80","endLine":4,"endColumn":46},{"ruleId":"81","severity":1,"message":"82","line":51,"column":6,"nodeType":"83","endLine":51,"endColumn":18,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":96,"column":6,"nodeType":"83","endLine":96,"endColumn":29,"suggestions":"86"},{"ruleId":"77","severity":1,"message":"87","line":17,"column":9,"nodeType":"79","messageId":"80","endLine":17,"endColumn":14},{"ruleId":"88","severity":1,"message":"89","line":49,"column":11,"nodeType":"90","messageId":"91","endLine":49,"endColumn":13},{"ruleId":"88","severity":1,"message":"89","line":60,"column":18,"nodeType":"90","messageId":"91","endLine":60,"endColumn":20},{"ruleId":"77","severity":1,"message":"92","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":11,"column":31,"nodeType":"95","messageId":"96","endLine":11,"endColumn":33},{"ruleId":"97","severity":1,"message":"98","line":122,"column":15,"nodeType":"99","messageId":"100","endLine":122,"endColumn":26},{"ruleId":"77","severity":1,"message":"101","line":132,"column":11,"nodeType":"79","messageId":"80","endLine":132,"endColumn":12},{"ruleId":"81","severity":1,"message":"102","line":26,"column":6,"nodeType":"83","endLine":26,"endColumn":14,"suggestions":"103"},{"ruleId":"93","severity":1,"message":"94","line":33,"column":33,"nodeType":"95","messageId":"96","endLine":33,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":52,"column":33,"nodeType":"95","messageId":"96","endLine":52,"endColumn":35},{"ruleId":"81","severity":1,"message":"104","line":62,"column":6,"nodeType":"83","endLine":62,"endColumn":13,"suggestions":"105"},{"ruleId":"93","severity":1,"message":"94","line":67,"column":33,"nodeType":"95","messageId":"96","endLine":67,"endColumn":35},{"ruleId":"81","severity":1,"message":"106","line":79,"column":6,"nodeType":"83","endLine":79,"endColumn":14,"suggestions":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatDate'. Either include it or remove the dependency array.","ArrayExpression",["110"],"React Hook useEffect has a missing dependency: 'selectedTimes.startTime'. Either include it or remove the dependency array.",["111"],"'props' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'x' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentJob'. Either include it or remove the dependency array.",["112"],"React Hook useEffect has missing dependencies: 'curJob' and 'retriveArr'. Either include them or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'curJob', 'month', and 'retriveArr'. Either include them or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [clickCount, formatDate]",{"range":"125","text":"126"},"Update the dependencies array to be: [selectedTimes.endTime, selectedTimes.startTime]",{"range":"127","text":"128"},"Update the dependencies array to be: [change, currentJob]",{"range":"129","text":"130"},"Update the dependencies array to be: [curJob, month, retriveArr]",{"range":"131","text":"132"},"Update the dependencies array to be: [change, curJob, month, retriveArr]",{"range":"133","text":"134"},[1794,1806],"[clickCount, formatDate]",[3180,3203],"[selectedTimes.endTime, selectedTimes.startTime]",[988,996],"[change, currentJob]",[2214,2221],"[curJob, month, retriveArr]",[2741,2749],"[change, curJob, month, retriveArr]"]