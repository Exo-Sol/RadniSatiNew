[{"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js":"1","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js":"2","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js":"3","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js":"4","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js":"5","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js":"6","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js":"7"},{"size":198,"mtime":1611139871704,"results":"8","hashOfConfig":"9"},{"size":5722,"mtime":1612298974175,"results":"10","hashOfConfig":"9"},{"size":5277,"mtime":1612115108491,"results":"11","hashOfConfig":"9"},{"size":2554,"mtime":1612022410780,"results":"12","hashOfConfig":"9"},{"size":364,"mtime":1612097305377,"results":"13","hashOfConfig":"9"},{"size":815,"mtime":1611830727444,"results":"14","hashOfConfig":"9"},{"size":815,"mtime":1612298379591,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"lqlpn9",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js",[],["35","36"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js",["37","38"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js",["39","40"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport HList from \"../components/HList\";\r\n\r\nimport \"../styles/mainStyle.css\";\r\n\r\nimport PopUp from \"./PopUp\";\r\n\r\nconst DateNav = ({ catchData, curJob }) => {\r\n  const [clickCount, setClickCount] = useState(0);\r\n\r\n  //////////DATE FORMARING//////////////////////////\r\n  //////////////////////////////////////////////////\r\n  const formatDate = (count) => {\r\n    const dateObj = new Date(),\r\n      dayNames = [\"Ned\", \"Pon\", \"Uto\", \"Sri\", \"Cet\", \"Pet\", \"Sub\"];\r\n    if (clickCount !== 0) {\r\n      console.log(\"dohvaceno\");\r\n      dateObj.setDate(new Date().getDate() + count);\r\n    }\r\n\r\n    return {\r\n      year: dateObj.getFullYear(),\r\n      day: dateObj.getDate(),\r\n      month: dateObj.getMonth() + 1,\r\n      dayName: dayNames[dateObj.getDay()],\r\n    };\r\n  };\r\n  //////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedDay, setSelectedDay] = useState(formatDate());\r\n  ///////////////////////////////////////////////////////////////\r\n  const [workHours, setWorkHours] = useState(0);\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedTimes, setSelectedTimes] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n  });\r\n  //////////////////////////////////////////////////////////////\r\n  const [popUpState, setPopUpState] = useState(false);\r\n\r\n  ////////////////////////ANIMATION///////////////////////////////////////\r\n\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  // settin the displayed date <_> clicking day back or foward is hooked with useEffect to change state\r\n  //witch is date displayed visualy\r\n\r\n  useEffect(() => {\r\n    setSelectedDay(formatDate(clickCount));\r\n  }, [clickCount]);\r\n\r\n  const dayFoward = () => {\r\n    setClickCount((count) => count + 1);\r\n  };\r\n\r\n  const dayBack = () => {\r\n    setClickCount((count) => count - 1);\r\n  };\r\n\r\n  /////////////JSX variables/////////////////////////////////\r\n\r\n  const backArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayBack}>\r\n      arrow_back_ios\r\n    </span>\r\n  );\r\n\r\n  const fwdArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayFoward}>\r\n      arrow_forward_ios\r\n    </span>\r\n  );\r\n  /////////////////////////////////////////////////////////\r\n  const clickHour = (e) => {\r\n    if (!selectedTimes.startTime) {\r\n      setSelectedTimes({ ...selectedTimes, startTime: e.target.textContent });\r\n    } else if (!selectedTimes.endTime) {\r\n      // make unable to select end time lower than start time\r\n      if (parseInt(e.target.textContent) > parseInt(selectedTimes.startTime)) {\r\n        setSelectedTimes({ ...selectedTimes, endTime: e.target.textContent });\r\n      }\r\n    }\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      let derivedWorkHours = selectedTimes.endTime - selectedTimes.startTime;\r\n      setWorkHours(derivedWorkHours);\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [selectedTimes.endTime]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  const hoursChange = (e) => {\r\n    setWorkHours(e.target.value);\r\n  };\r\n\r\n  //////////////////////////////////\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (workHours > 24 || workHours < 0) {\r\n      alert(\"Netocno uneseni sati\");\r\n    } else if (workHours) {\r\n      catchData(selectedDay, workHours, selectedTimes);\r\n      setWorkHours(0);\r\n      setSelectedTimes({\r\n        startTime: null,\r\n        endTime: null,\r\n      });\r\n      /////////////////////////\r\n      setPopUpState(true);\r\n      setTimeout(() => {\r\n        setPopUpState(false);\r\n      }, 800);\r\n    }\r\n  };\r\n  /////////////////////////////////////////////\r\n  const clickDelete = () => {\r\n    setWorkHours(0);\r\n    setSelectedTimes({\r\n      startTime: null,\r\n      endTime: null,\r\n    });\r\n  };\r\n  ////////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <div className=\"popUpWrapper\">\r\n        {popUpState ? <PopUp curJob={curJob} /> : <div></div>}\r\n      </div>\r\n      <div className=\"dateNav\">\r\n        {backArrow}\r\n\r\n        <span id=\"animateDate\">{`${selectedDay.dayName}, ${selectedDay.day}/${selectedDay.month}`}</span>\r\n        {fwdArrow}\r\n      </div>\r\n      <div className=\"flexWrapNav\">\r\n        <input\r\n          type=\"number\"\r\n          className=\"inputField\"\r\n          name=\"workHours\"\r\n          placeholder=\"Radni sati\"\r\n          value={workHours}\r\n          onChange={hoursChange}\r\n          style={{ display: \"block\" }}\r\n        />\r\n        <br />\r\n        <div className=\"flexWrapButtons\">\r\n          <input\r\n            type=\"submit\"\r\n            onClick={onSubmit}\r\n            value=\"Save\"\r\n            id=\"save\"\r\n            className=\"buttons\"\r\n          />\r\n\r\n          <button id=\"delete\" onClick={clickDelete} className=\"buttons\">\r\n            Del\r\n          </button>\r\n        </div>\r\n        <div className=\"hourPad\">\r\n          <HList clickHour={clickHour} selectedTimes={selectedTimes} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DateNav;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js",["41","42","43"],"import React, { useState } from \"react\";\r\nimport { useSpring, animated, useTransition } from \"react-spring\";\r\nimport \"../styles/mainStyle.css\";\r\n\r\nconst HList = ({ clickHour, selectedTimes }) => {\r\n  // const clickedBtn = (e) => {\r\n  //   clickHour\r\n  //   console.log(e.target.textContent);\r\n  // };\r\n\r\n  // create an array of jobe time stamps, for now\r\n  const arr = [];\r\n  ////////////////////////\r\n  const [displaySelector, changeDisplySelector] = useState(false);\r\n\r\n  /////////////////////////////ANIMATION///////////////////////////////////////\r\n  const props = useSpring({\r\n    config: { duration: 1250 },\r\n    opacity: 1,\r\n    from: { opacity: 0 },\r\n  });\r\n\r\n  const transitions = useTransition(displaySelector, null, {\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  });\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  const startStyle = {\r\n    backgroundColor: \"#5de6da\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const endStyle = {\r\n    backgroundColor: \"#ee3968\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const resetSyle = {\r\n    border: \"gray 1px solid\",\r\n    color: \"black\",\r\n    backgroundColor: \"#fafad2\",\r\n  };\r\n\r\n  for (let i = 7; i <= 24; i++) {\r\n    if (i == selectedTimes.startTime) {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={startStyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else if (i == selectedTimes.endTime) {\r\n      arr.push(\r\n        <h1 onClick={clickHour} className=\"numberList\" style={endStyle} key={i}>\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={resetSyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    }\r\n  }\r\n\r\n  const hClick = () => {\r\n    changeDisplySelector(!displaySelector);\r\n  };\r\n\r\n  return displaySelector ? (\r\n    transitions.map(\r\n      ({ item, key, props }) =>\r\n        item && (\r\n          <animated.div className=\"hourSelect\" key={key} style={props}>\r\n            {arr}\r\n            <button\r\n              className=\"numberList hButton\"\r\n              onClick={hClick}\r\n              style={resetSyle}\r\n            >\r\n              H -\r\n            </button>\r\n          </animated.div>\r\n        )\r\n    )\r\n  ) : (\r\n    <button className=\"numberList hButton\" onClick={hClick} style={resetSyle}>\r\n      H +\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default HList;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js",[],["44","45"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js",["46","47"],"import React, { useState } from \"react\";\r\n\r\nconst DisplayThisMonthHours = ({ curJob }) => {\r\n  const dateObj = new Date();\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  const month = dateObj.getMonth() + 1;\r\n\r\n  let totalH = 0;\r\n  if (retriveArr && Array.isArray(retriveArr)) {\r\n    retriveArr.map((ele, ind) => {\r\n      if (ele.month === month && ele.job === curJob) {\r\n        totalH += ele.workHours;\r\n      }\r\n    });\r\n  } else if (retriveArr) {\r\n    totalH += retriveArr.workHours;\r\n  }\r\n\r\n  let stringTotalH = totalH.toString();\r\n  let lastChar = +stringTotalH.slice(-1);\r\n\r\n  return (\r\n    <div className=\"displInfoMain\">{`${totalH} ${\r\n      lastChar === 1 ? \"sat\" : \"sati\"\r\n    } u ${month} mj. (${curJob}) `}</div>\r\n  );\r\n};\r\n\r\nexport default DisplayThisMonthHours;\r\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":114,"column":15,"nodeType":"54","messageId":"55","endLine":114,"endColumn":26},{"ruleId":"56","severity":1,"message":"57","line":124,"column":11,"nodeType":"58","messageId":"59","endLine":124,"endColumn":12},{"ruleId":"60","severity":1,"message":"61","line":51,"column":6,"nodeType":"62","endLine":51,"endColumn":18,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"64","line":96,"column":6,"nodeType":"62","endLine":96,"endColumn":29,"suggestions":"65"},{"ruleId":"56","severity":1,"message":"66","line":17,"column":9,"nodeType":"58","messageId":"59","endLine":17,"endColumn":14},{"ruleId":"67","severity":1,"message":"68","line":49,"column":11,"nodeType":"69","messageId":"70","endLine":49,"endColumn":13},{"ruleId":"67","severity":1,"message":"68","line":60,"column":18,"nodeType":"69","messageId":"70","endLine":60,"endColumn":20},{"ruleId":"48","replacedBy":"71"},{"ruleId":"50","replacedBy":"72"},{"ruleId":"56","severity":1,"message":"73","line":1,"column":17,"nodeType":"58","messageId":"59","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"75","line":11,"column":31,"nodeType":"76","messageId":"77","endLine":11,"endColumn":33},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-unused-vars","'x' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatDate'. Either include it or remove the dependency array.","ArrayExpression",["80"],"React Hook useEffect has a missing dependency: 'selectedTimes.startTime'. Either include it or remove the dependency array.",["81"],"'props' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["78"],["79"],"'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [clickCount, formatDate]",{"range":"86","text":"87"},"Update the dependencies array to be: [selectedTimes.endTime, selectedTimes.startTime]",{"range":"88","text":"89"},[1786,1798],"[clickCount, formatDate]",[3172,3195],"[selectedTimes.endTime, selectedTimes.startTime]"]