[{"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js":"1","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js":"2","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js":"3","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js":"4","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js":"5","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js":"6","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js":"7","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\FirstPage.js":"8","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js":"9","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js":"10","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js":"11","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js":"12","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\Delete.js":"13","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js":"14","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\Page2.js":"15"},{"size":198,"mtime":1612353468344,"results":"16","hashOfConfig":"17"},{"size":2417,"mtime":1613644437470,"results":"18","hashOfConfig":"17"},{"size":5854,"mtime":1613664404703,"results":"19","hashOfConfig":"17"},{"size":2638,"mtime":1613041401678,"results":"20","hashOfConfig":"17"},{"size":364,"mtime":1612357701466,"results":"21","hashOfConfig":"17"},{"size":815,"mtime":1611830727444,"results":"22","hashOfConfig":"17"},{"size":845,"mtime":1613063226541,"results":"23","hashOfConfig":"17"},{"size":6663,"mtime":1613590929675,"results":"24","hashOfConfig":"17"},{"size":4375,"mtime":1613665177530,"results":"25","hashOfConfig":"17"},{"size":1989,"mtime":1612986874319,"results":"26","hashOfConfig":"17"},{"size":362,"mtime":1612983354825,"results":"27","hashOfConfig":"17"},{"size":1041,"mtime":1613060752924,"results":"28","hashOfConfig":"17"},{"size":3438,"mtime":1613481786115,"results":"29","hashOfConfig":"17"},{"size":563,"mtime":1613591350011,"results":"30","hashOfConfig":"17"},{"size":381,"mtime":1613650690415,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"lqlpn9",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js",[],["68","69"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js",["70"],"import React, { useState } from \"react\";\r\nimport FirstPage from \"./FirstPage\";\r\nimport SecondPage from \"./seconPage/SecondPage\";\r\nimport Page2 from \"./components/Page2\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport SwipeableRoutes from \"react-swipeable-routes\";\r\n\r\nconst App = () => {\r\n  // to indicate change in added time to pase change notification to second ppage\r\n  const [change, setChange] = useState(false);\r\n  // when you \"nuke\" delete all data, to delete jobs enered in state also\r\n  const [nukeAll, setNukeAll] = useState(false);\r\n\r\n  const onAddedTime = (nuke = false) => {\r\n    setChange(!change);\r\n    if (nuke) {\r\n      setNukeAll(!nukeAll);\r\n      console.log();\r\n    }\r\n  };\r\n  //  const FirstPage = <FirstPage onAddedTime={onAddedTime} />;\r\n  const dateObj = new Date();\r\n  const year = dateObj.getFullYear();\r\n  const retrivedObj = localStorage.getItem(year);\r\n\r\n  return (\r\n    <>\r\n      {/* conditional rendering so it dosent display table when there is no entry, this happens at the very start of use */}\r\n      {retrivedObj ? (\r\n        <Router>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    nuke={nukeAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                path=\"/second\"\r\n                render={(props) => (\r\n                  <SecondPage\r\n                    {...props}\r\n                    change={change}\r\n                    onAddedTime={onAddedTime}\r\n                  />\r\n                )}\r\n              />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </Router>\r\n      ) : (\r\n        <Router>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    nuke={nukeAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route path=\"/second\" render={(props) => <Page2 />} />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </Router>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js",["71","72"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js",["73","74","75"],"import React, { useState } from \"react\";\r\nimport { useSpring, animated, useTransition } from \"react-spring\";\r\nimport \"../styles/mainStyle.css\";\r\n\r\nconst HList = ({ clickHour, selectedTimes, catchD }) => {\r\n  // const clickedBtn = (e) => {\r\n  //   clickHour\r\n  //   console.log(e.target.textContent);\r\n  // };\r\n\r\n  // create an array of jobe time stamps, for now\r\n  const arr = [];\r\n  ////////////////////////\r\n  const [displaySelector, changeDisplySelector] = useState(false);\r\n\r\n  /////////////////////////////ANIMATION///////////////////////////////////////\r\n  const props = useSpring({\r\n    config: { duration: 1250 },\r\n    opacity: 1,\r\n    from: { opacity: 0 },\r\n  });\r\n\r\n  const transitions = useTransition(displaySelector, null, {\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  });\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  const startStyle = {\r\n    backgroundColor: \"#5de6da\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const endStyle = {\r\n    backgroundColor: \"#ee3968\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const resetSyle = {\r\n    border: \"gray 1px solid\",\r\n    color: \"black\",\r\n    backgroundColor: \"#fafad2\",\r\n  };\r\n\r\n  for (let i = 7; i <= 24; i++) {\r\n    if (i == selectedTimes.startTime) {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={startStyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else if (i == selectedTimes.endTime) {\r\n      arr.push(\r\n        <h1 onClick={clickHour} className=\"numberList\" style={endStyle} key={i}>\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={resetSyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    }\r\n  }\r\n\r\n  const hClick = () => {\r\n    changeDisplySelector(!displaySelector);\r\n    catchD();\r\n  };\r\n\r\n  return displaySelector ? (\r\n    transitions.map(\r\n      ({ item, key, props }) =>\r\n        item && (\r\n          <animated.div className=\"hourSelect\" key={key} style={props}>\r\n            {arr}\r\n            <span\r\n              className=\"material-icons numberList hButton\"\r\n              onClick={hClick}\r\n              style={resetSyle}\r\n            >\r\n              eject\r\n            </span>\r\n          </animated.div>\r\n        )\r\n    )\r\n  ) : (\r\n    <span\r\n      className=\"material-icons numberList hButton\"\r\n      onClick={hClick}\r\n      style={resetSyle}\r\n    >\r\n      query_builder\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default HList;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js",["76","77"],"import React, { useState } from \"react\";\r\n\r\nconst DisplayThisMonthHours = ({ curJob }) => {\r\n  const dateObj = new Date();\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  const month = dateObj.getMonth() + 1;\r\n\r\n  let totalH = 0;\r\n  if (retriveArr && Array.isArray(retriveArr)) {\r\n    retriveArr.map((ele, ind) => {\r\n      if (ele.month === parseInt(month) && ele.job === curJob) {\r\n        totalH += parseInt(ele.workHours);\r\n      }\r\n    });\r\n  } else if (retriveArr) {\r\n    totalH += parseInt(retriveArr.workHours);\r\n  }\r\n\r\n  let stringTotalH = totalH.toString();\r\n  let lastChar = +stringTotalH.slice(-1);\r\n\r\n  return (\r\n    <div className=\"displInfoMain\">{`${totalH} ${\r\n      lastChar === 1 ? \"sat\" : \"sati\"\r\n    } u ${month} mj. (${curJob}) `}</div>\r\n  );\r\n};\r\n\r\nexport default DisplayThisMonthHours;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\FirstPage.js",["78","79","80"],"import React, { useState, useEffect } from \"react\";\nimport DateNav from \"./components/DateNav\";\nimport NameJob from \"./components/addRenameJob/NameJob\";\nimport DisplayThisMonthHours from \"./components/DisplayThisMonthHours\";\nimport { useSpring, animated } from \"react-spring\";\n\nfunction FirstPage({ onAddedTime, nuke }) {\n  const [jobName, setJobName] = useState(null);\n  const [curJob, setCurJob] = useState(null);\n  const [addJob, setAddJob] = useState(false);\n  /// to force update on hours in a month\n  const [chageOfH, setChangeOfH] = useState(false);\n  // to toggle of display thismonthhours\n  const [displaySwitch, setDisplaySwitch] = useState(true);\n  /////////////////////Saving current job in local storage when changed for display on page 2\n  useEffect(() => {\n    localStorage.setItem(\"currentJob\", curJob);\n    /// indicate change for second page\n    /////////////////////////////////////\n    ///////////////////////////////////////\n    onAddedTime();\n  }, [curJob]);\n\n  useEffect(() => {\n    setJobName(null);\n    setCurJob(null);\n  }, [nuke]);\n\n  ///Retrivin Jobs from local storage on initial render\n  useEffect(() => {\n    const savedJobs = window.localStorage.getItem(\"jobs\");\n    console.log(savedJobs);\n    if (savedJobs) {\n      if (savedJobs.includes(\",\")) {\n        const array = savedJobs.split(\",\");\n        setJobName(array);\n        setCurJob(array[0]);\n      } else {\n        let x = [];\n        x.push(savedJobs);\n        setJobName(x);\n        setCurJob(savedJobs);\n      }\n    }\n  }, []);\n\n  //////////////////////initial animation\n  const springProps = useSpring({ opacity: addJob ? 0 : 1 });\n\n  //////////////////////////////////////////////////////////////////\n  const catchName = (name) => {\n    ///first check if name is enetered\n    /// check that there is no duplicates in name\n    if (name.length > 0) {\n      if (Array.isArray(jobName) && !jobName.includes(name)) {\n        setJobName([...jobName, name]);\n      } else if (!Array.isArray(jobName)) {\n        let x = [];\n        x.push(name);\n        setJobName(x);\n      } else {\n        /// show alert pointing why you cant enetr name\n        /// either you didnt type anything or name already exists\n        if (jobName.includes(name)) {\n          alert(\"Posao s tim imenom vec postoji\");\n        }\n      }\n      setCurJob(name);\n      setAddJob(false);\n    }\n  };\n\n  /////code for saving jobs from state in local storage\n\n  useEffect(() => {\n    if (jobName) {\n      localStorage.setItem(\"jobs\", jobName);\n    } else {\n      localStorage.removeItem(\"jobs\");\n    }\n  }, [jobName]);\n  //////////////////////////////////////////////////////////\n\n  const addJobClick = () => {\n    setAddJob(true);\n  };\n\n  const deleteJobClick = () => {\n    if (window.confirm(`Izbrisi ${curJob}?`)) {\n      if (jobName && jobName.length > 1) {\n        let filteredAry = jobName.filter((e) => e !== curJob);\n        setJobName(filteredAry);\n        setCurJob(filteredAry[0]);\n      } else {\n        setJobName(null);\n        setCurJob(null);\n      }\n    }\n  };\n  ////////////////////////////////////////////////////////\n  const catchData = (dateObj, workHours, startEndTime) => {\n    const finalObj = startEndTime.startTime\n      ? {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: startEndTime.startTime,\n          endTime: startEndTime.endTime,\n        }\n      : {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: \"#\",\n          endTime: \"#\",\n        };\n\n    const retrivedObj = JSON.parse(localStorage.getItem(dateObj.year));\n\n    if (Array.isArray(retrivedObj)) {\n      retrivedObj.push(finalObj);\n      let objForSaving = JSON.stringify(retrivedObj);\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else if (dateObj.year in localStorage) {\n      console.log(retrivedObj);\n      let x = new Array();\n      console.log(typeof x);\n\n      x.push(retrivedObj);\n\n      x.push(finalObj);\n      let objForSaving = JSON.stringify(x);\n\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else {\n      let x = [];\n      let storageArr = JSON.stringify(finalObj);\n      console.log(storageArr);\n      localStorage.setItem(dateObj.year, storageArr);\n    }\n    setChangeOfH(!chageOfH);\n    /// indicate change for second page\n    onAddedTime();\n    console.log(\"to mi treba tommy\");\n  };\n  ///////////////////////////////////////////////////////////////////////////////////////\n  const backName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n    console.log(curIndex);\n\n    if (curIndex - 1 < 0) {\n      setCurJob(jobName[jobName.length - 1]);\n    } else {\n      setCurJob(jobName[curIndex - 1]);\n    }\n  };\n\n  const fowardName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n\n    if (curIndex + 1 > jobName.length - 1) {\n      setCurJob(jobName[0]);\n    } else {\n      setCurJob(jobName[curIndex + 1]);\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n  const jobDisplay = (\n    <div className=\"jobDispl\">\n      {jobName && jobName.length > 1 && (\n        <span className=\"material-icons jobArrow\" onClick={backName}>\n          arrow_back_ios\n        </span>\n      )}\n\n      <h4 id=\"jN\">{curJob}</h4>\n      {jobName && jobName.length > 1 && (\n        <span className=\"material-icons jobArrow\" onClick={fowardName}>\n          arrow_forward_ios\n        </span>\n      )}\n    </div>\n  );\n  ////////////////////////////////////////////////////////////////////////////\n  const catchDropdown = () => {\n    setDisplaySwitch(!displaySwitch);\n  };\n\n  ///////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"FirstPage\">\n      {jobName && (\n        <div>\n          <button id=\"addJob\" onClick={addJobClick}>\n            Dodaj posao\n          </button>\n          <button id=\"removeJob\" onClick={deleteJobClick}>\n            Izbrisi posao\n          </button>\n        </div>\n      )}\n      {jobName ? jobDisplay : <NameJob catchName={catchName} />}\n      {addJob && <NameJob catchName={catchName} />}\n\n      {jobName && (\n        <animated.div style={springProps}>\n          <DateNav\n            catchData={catchData}\n            curJob={curJob}\n            catchD={catchDropdown}\n          />\n        </animated.div>\n      )}\n      {jobName && displaySwitch && (\n        <DisplayThisMonthHours curJob={curJob} change={chageOfH} />\n      )}\n    </div>\n  );\n}\n\nexport default FirstPage;\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js",["81","82","83","84","85","86"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\Delete.js",["87","88"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst Delete = ({ relevantShifts, onAddedTime }) => {\r\n  const [clickedDel, setClickedDel] = useState(false);\r\n  const [deleteInput, setDeleteInput] = useState(undefined);\r\n  const [forSaving, setForSaving] = useState([]);\r\n  const dateObj = new Date();\r\n\r\n  useEffect(() => {\r\n    if (forSaving && forSaving.length > 0) {\r\n      let objForSaving = JSON.stringify(forSaving);\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      localStorage.setItem(dateObj.getFullYear(), objForSaving);\r\n      onAddedTime();\r\n      setDeleteInput(undefined);\r\n    } else if (forSaving === undefined) {\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      onAddedTime();\r\n    }\r\n  }, [forSaving]);\r\n\r\n  const firstClickDel = () => {\r\n    setForSaving([]);\r\n    console.log(relevantShifts.length);\r\n    console.log(parseInt(deleteInput));\r\n    if (parseInt(deleteInput) <= relevantShifts.length) {\r\n      // delete that data, update page\r\n      delSelectedData(relevantShifts[parseInt(deleteInput) - 1]);\r\n\r\n      console.log(\"tu smo maci\");\r\n    }\r\n    setClickedDel(!clickedDel);\r\n  };\r\n\r\n  const numInput = (e) => {\r\n    setDeleteInput(e.target.value);\r\n  };\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const contentProps = useSpring({\r\n    opacity: clickedDel ? 1 : 0,\r\n    marginLeft: clickedDel ? 0 : -300,\r\n  });\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const delSelectedData = (data) => {\r\n    console.log(data);\r\n    const dateObj = new Date();\r\n    const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n    console.log(retriveArr);\r\n    if (Array.isArray(retriveArr) && retriveArr.length > 1) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (JSON.stringify(ele) !== JSON.stringify(data)) {\r\n          console.log(\"hit that\");\r\n          setForSaving((forSaving) => [...forSaving, ele]);\r\n        }\r\n      });\r\n    } else {\r\n      console.log(\"a moramo bit ovdi\");\r\n      setForSaving(undefined);\r\n\r\n      setDeleteInput(undefined);\r\n    }\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"deleteDiv\">\r\n      <span\r\n        className=\"material-icons icons\"\r\n        id=\"deleteIcon\"\r\n        onClick={firstClickDel}\r\n      >\r\n        delete\r\n      </span>\r\n      {clickedDel && (\r\n        <animated.input\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          className=\"inputField\"\r\n          id=\"delPlaceholder\"\r\n          name=\"workHours\"\r\n          placeholder=\"Br?\"\r\n          value={deleteInput}\r\n          onChange={numInput}\r\n          style={contentProps}\r\n          autoFocus={true}\r\n          onKeyDown={(evt) =>\r\n            [\"e\", \"E\", \"+\", \"-\", \"0\"].includes(evt.key) && evt.preventDefault()\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Delete;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\Page2.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":5,"column":42,"nodeType":"95","messageId":"96","endLine":5,"endColumn":46},{"ruleId":"97","severity":1,"message":"98","line":51,"column":6,"nodeType":"99","endLine":51,"endColumn":18,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":98,"column":6,"nodeType":"99","endLine":98,"endColumn":29,"suggestions":"102"},{"ruleId":"93","severity":1,"message":"103","line":17,"column":9,"nodeType":"95","messageId":"96","endLine":17,"endColumn":14},{"ruleId":"104","severity":1,"message":"105","line":49,"column":11,"nodeType":"106","messageId":"107","endLine":49,"endColumn":13},{"ruleId":"104","severity":1,"message":"105","line":60,"column":18,"nodeType":"106","messageId":"107","endLine":60,"endColumn":20},{"ruleId":"93","severity":1,"message":"108","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"109","severity":1,"message":"110","line":11,"column":31,"nodeType":"111","messageId":"112","endLine":11,"endColumn":33},{"ruleId":"97","severity":1,"message":"113","line":22,"column":6,"nodeType":"99","endLine":22,"endColumn":14,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":130,"column":15,"nodeType":"117","messageId":"118","endLine":130,"endColumn":26},{"ruleId":"93","severity":1,"message":"119","line":140,"column":11,"nodeType":"95","messageId":"96","endLine":140,"endColumn":12},{"ruleId":"97","severity":1,"message":"120","line":33,"column":6,"nodeType":"99","endLine":33,"endColumn":14,"suggestions":"121"},{"ruleId":"109","severity":1,"message":"110","line":40,"column":33,"nodeType":"111","messageId":"112","endLine":40,"endColumn":35},{"ruleId":"109","severity":1,"message":"110","line":63,"column":33,"nodeType":"111","messageId":"112","endLine":63,"endColumn":35},{"ruleId":"97","severity":1,"message":"122","line":73,"column":6,"nodeType":"99","endLine":73,"endColumn":13,"suggestions":"123"},{"ruleId":"109","severity":1,"message":"110","line":77,"column":33,"nodeType":"111","messageId":"112","endLine":77,"endColumn":35},{"ruleId":"97","severity":1,"message":"124","line":92,"column":6,"nodeType":"99","endLine":92,"endColumn":18,"suggestions":"125"},{"ruleId":"97","severity":1,"message":"126","line":21,"column":6,"nodeType":"99","endLine":21,"endColumn":17,"suggestions":"127"},{"ruleId":"109","severity":1,"message":"110","line":53,"column":33,"nodeType":"111","messageId":"112","endLine":53,"endColumn":35},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatDate'. Either include it or remove the dependency array.","ArrayExpression",["130"],"React Hook useEffect has a missing dependency: 'selectedTimes.startTime'. Either include it or remove the dependency array.",["131"],"'props' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'onAddedTime'. Either include it or remove the dependency array. If 'onAddedTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'x' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentJob' and 'linkEffect'. Either include them or remove the dependency array. You can also do a functional update 'setLinkEffect(l => ...)' if you only need 'linkEffect' in the 'setLinkEffect' call.",["133"],"React Hook useEffect has missing dependencies: 'curJob' and 'retriveArr'. Either include them or remove the dependency array.",["134"],"React Hook useEffect has missing dependencies: 'curJob', 'month', and 'retriveArr'. Either include them or remove the dependency array.",["135"],"React Hook useEffect has missing dependencies: 'dateObj' and 'onAddedTime'. Either include them or remove the dependency array. If 'onAddedTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["136"],"no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [clickCount, formatDate]",{"range":"151","text":"152"},"Update the dependencies array to be: [selectedTimes.endTime, selectedTimes.startTime]",{"range":"153","text":"154"},"Update the dependencies array to be: [curJob, onAddedTime]",{"range":"155","text":"156"},"Update the dependencies array to be: [change, currentJob, linkEffect]",{"range":"157","text":"158"},"Update the dependencies array to be: [curJob, month, retriveArr]",{"range":"159","text":"160"},"Update the dependencies array to be: [curJob, linkEffect, month, retriveArr]",{"range":"161","text":"162"},"Update the dependencies array to be: [dateObj, forSaving, onAddedTime]",{"range":"163","text":"164"},[1802,1814],"[clickCount, formatDate]",[3246,3269],"[selectedTimes.endTime, selectedTimes.startTime]",[970,978],"[curJob, onAddedTime]",[1350,1358],"[change, currentJob, linkEffect]",[2664,2671],"[curJob, month, retriveArr]",[3229,3241],"[curJob, linkEffect, month, retriveArr]",[794,805],"[dateObj, forSaving, onAddedTime]"]