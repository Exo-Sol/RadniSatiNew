[{"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js":"1","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js":"2","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js":"3","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js":"4","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js":"5","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js":"6","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js":"7","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\FirstPage.js":"8","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js":"9"},{"size":198,"mtime":1612353468344,"results":"10","hashOfConfig":"11"},{"size":556,"mtime":1612629979223,"results":"12","hashOfConfig":"11"},{"size":5277,"mtime":1612115108491,"results":"13","hashOfConfig":"11"},{"size":2615,"mtime":1612365107308,"results":"14","hashOfConfig":"11"},{"size":364,"mtime":1612357701466,"results":"15","hashOfConfig":"11"},{"size":815,"mtime":1611830727444,"results":"16","hashOfConfig":"11"},{"size":815,"mtime":1612298379591,"results":"17","hashOfConfig":"11"},{"size":5680,"mtime":1612634859840,"results":"18","hashOfConfig":"11"},{"size":1663,"mtime":1612639271585,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"lqlpn9",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js",[],["44","45"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js",["46"],"import React from \"react\";\r\nimport FirstPage from \"./FirstPage\";\r\nimport SecondPage from \"./seconPage/SecondPage\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport SwipeableRoutes from \"react-swipeable-routes\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <SwipeableRoutes>\r\n          <Route path=\"/first\" component={FirstPage} />\r\n          <Route path=\"/second\" component={SecondPage} />\r\n        </SwipeableRoutes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js",["47","48"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport HList from \"../components/HList\";\r\n\r\nimport \"../styles/mainStyle.css\";\r\n\r\nimport PopUp from \"./PopUp\";\r\n\r\nconst DateNav = ({ catchData, curJob }) => {\r\n  const [clickCount, setClickCount] = useState(0);\r\n\r\n  //////////DATE FORMARING//////////////////////////\r\n  //////////////////////////////////////////////////\r\n  const formatDate = (count) => {\r\n    const dateObj = new Date(),\r\n      dayNames = [\"Ned\", \"Pon\", \"Uto\", \"Sri\", \"Cet\", \"Pet\", \"Sub\"];\r\n    if (clickCount !== 0) {\r\n      console.log(\"dohvaceno\");\r\n      dateObj.setDate(new Date().getDate() + count);\r\n    }\r\n\r\n    return {\r\n      year: dateObj.getFullYear(),\r\n      day: dateObj.getDate(),\r\n      month: dateObj.getMonth() + 1,\r\n      dayName: dayNames[dateObj.getDay()],\r\n    };\r\n  };\r\n  //////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedDay, setSelectedDay] = useState(formatDate());\r\n  ///////////////////////////////////////////////////////////////\r\n  const [workHours, setWorkHours] = useState(0);\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedTimes, setSelectedTimes] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n  });\r\n  //////////////////////////////////////////////////////////////\r\n  const [popUpState, setPopUpState] = useState(false);\r\n\r\n  ////////////////////////ANIMATION///////////////////////////////////////\r\n\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  // settin the displayed date <_> clicking day back or foward is hooked with useEffect to change state\r\n  //witch is date displayed visualy\r\n\r\n  useEffect(() => {\r\n    setSelectedDay(formatDate(clickCount));\r\n  }, [clickCount]);\r\n\r\n  const dayFoward = () => {\r\n    setClickCount((count) => count + 1);\r\n  };\r\n\r\n  const dayBack = () => {\r\n    setClickCount((count) => count - 1);\r\n  };\r\n\r\n  /////////////JSX variables/////////////////////////////////\r\n\r\n  const backArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayBack}>\r\n      arrow_back_ios\r\n    </span>\r\n  );\r\n\r\n  const fwdArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayFoward}>\r\n      arrow_forward_ios\r\n    </span>\r\n  );\r\n  /////////////////////////////////////////////////////////\r\n  const clickHour = (e) => {\r\n    if (!selectedTimes.startTime) {\r\n      setSelectedTimes({ ...selectedTimes, startTime: e.target.textContent });\r\n    } else if (!selectedTimes.endTime) {\r\n      // make unable to select end time lower than start time\r\n      if (parseInt(e.target.textContent) > parseInt(selectedTimes.startTime)) {\r\n        setSelectedTimes({ ...selectedTimes, endTime: e.target.textContent });\r\n      }\r\n    }\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      let derivedWorkHours = selectedTimes.endTime - selectedTimes.startTime;\r\n      setWorkHours(derivedWorkHours);\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [selectedTimes.endTime]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  const hoursChange = (e) => {\r\n    setWorkHours(e.target.value);\r\n  };\r\n\r\n  //////////////////////////////////\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (workHours > 24 || workHours < 0) {\r\n      alert(\"Netocno uneseni sati\");\r\n    } else if (workHours) {\r\n      catchData(selectedDay, workHours, selectedTimes);\r\n      setWorkHours(0);\r\n      setSelectedTimes({\r\n        startTime: null,\r\n        endTime: null,\r\n      });\r\n      /////////////////////////\r\n      setPopUpState(true);\r\n      setTimeout(() => {\r\n        setPopUpState(false);\r\n      }, 800);\r\n    }\r\n  };\r\n  /////////////////////////////////////////////\r\n  const clickDelete = () => {\r\n    setWorkHours(0);\r\n    setSelectedTimes({\r\n      startTime: null,\r\n      endTime: null,\r\n    });\r\n  };\r\n  ////////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <div className=\"popUpWrapper\">\r\n        {popUpState ? <PopUp curJob={curJob} /> : <div></div>}\r\n      </div>\r\n      <div className=\"dateNav\">\r\n        {backArrow}\r\n\r\n        <span id=\"animateDate\">{`${selectedDay.dayName}, ${selectedDay.day}/${selectedDay.month}`}</span>\r\n        {fwdArrow}\r\n      </div>\r\n      <div className=\"flexWrapNav\">\r\n        <input\r\n          type=\"number\"\r\n          className=\"inputField\"\r\n          name=\"workHours\"\r\n          placeholder=\"Radni sati\"\r\n          value={workHours}\r\n          onChange={hoursChange}\r\n          style={{ display: \"block\" }}\r\n        />\r\n        <br />\r\n        <div className=\"flexWrapButtons\">\r\n          <input\r\n            type=\"submit\"\r\n            onClick={onSubmit}\r\n            value=\"Save\"\r\n            id=\"save\"\r\n            className=\"buttons\"\r\n          />\r\n\r\n          <button id=\"delete\" onClick={clickDelete} className=\"buttons\">\r\n            Del\r\n          </button>\r\n        </div>\r\n        <div className=\"hourPad\">\r\n          <HList clickHour={clickHour} selectedTimes={selectedTimes} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DateNav;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js",["49","50","51"],"import React, { useState } from \"react\";\r\nimport { useSpring, animated, useTransition } from \"react-spring\";\r\nimport \"../styles/mainStyle.css\";\r\n\r\nconst HList = ({ clickHour, selectedTimes }) => {\r\n  // const clickedBtn = (e) => {\r\n  //   clickHour\r\n  //   console.log(e.target.textContent);\r\n  // };\r\n\r\n  // create an array of jobe time stamps, for now\r\n  const arr = [];\r\n  ////////////////////////\r\n  const [displaySelector, changeDisplySelector] = useState(false);\r\n\r\n  /////////////////////////////ANIMATION///////////////////////////////////////\r\n  const props = useSpring({\r\n    config: { duration: 1250 },\r\n    opacity: 1,\r\n    from: { opacity: 0 },\r\n  });\r\n\r\n  const transitions = useTransition(displaySelector, null, {\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  });\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  const startStyle = {\r\n    backgroundColor: \"#5de6da\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const endStyle = {\r\n    backgroundColor: \"#ee3968\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const resetSyle = {\r\n    border: \"gray 1px solid\",\r\n    color: \"black\",\r\n    backgroundColor: \"#fafad2\",\r\n  };\r\n\r\n  for (let i = 7; i <= 24; i++) {\r\n    if (i == selectedTimes.startTime) {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={startStyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else if (i == selectedTimes.endTime) {\r\n      arr.push(\r\n        <h1 onClick={clickHour} className=\"numberList\" style={endStyle} key={i}>\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={resetSyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    }\r\n  }\r\n\r\n  const hClick = () => {\r\n    changeDisplySelector(!displaySelector);\r\n  };\r\n\r\n  return displaySelector ? (\r\n    transitions.map(\r\n      ({ item, key, props }) =>\r\n        item && (\r\n          <animated.div className=\"hourSelect\" key={key} style={props}>\r\n            {arr}\r\n            <span\r\n              className=\"material-icons numberList hButton\"\r\n              onClick={hClick}\r\n              style={resetSyle}\r\n            >\r\n              eject\r\n            </span>\r\n          </animated.div>\r\n        )\r\n    )\r\n  ) : (\r\n    <span\r\n      className=\"material-icons numberList hButton\"\r\n      onClick={hClick}\r\n      style={resetSyle}\r\n    >\r\n      query_builder\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default HList;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js",["52","53"],"import React, { useState } from \"react\";\r\n\r\nconst DisplayThisMonthHours = ({ curJob }) => {\r\n  const dateObj = new Date();\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  const month = dateObj.getMonth() + 1;\r\n\r\n  let totalH = 0;\r\n  if (retriveArr && Array.isArray(retriveArr)) {\r\n    retriveArr.map((ele, ind) => {\r\n      if (ele.month === month && ele.job === curJob) {\r\n        totalH += ele.workHours;\r\n      }\r\n    });\r\n  } else if (retriveArr) {\r\n    totalH += retriveArr.workHours;\r\n  }\r\n\r\n  let stringTotalH = totalH.toString();\r\n  let lastChar = +stringTotalH.slice(-1);\r\n\r\n  return (\r\n    <div className=\"displInfoMain\">{`${totalH} ${\r\n      lastChar === 1 ? \"sat\" : \"sati\"\r\n    } u ${month} mj. (${curJob}) `}</div>\r\n  );\r\n};\r\n\r\nexport default DisplayThisMonthHours;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\FirstPage.js",["54","55"],"import React, { useState, useEffect } from \"react\";\nimport DateNav from \"./components/DateNav\";\nimport NameJob from \"./components/addRenameJob/NameJob\";\nimport DisplayThisMonthHours from \"./components/DisplayThisMonthHours\";\nimport { useSpring, animated } from \"react-spring\";\n\nfunction FirstPage() {\n  const [jobName, setJobName] = useState(null);\n  const [curJob, setCurJob] = useState(null);\n  const [addJob, setAddJob] = useState(false);\n  /// to force update on hours in a month\n  const [chageOfH, setChangeOfH] = useState(false);\n\n  /////////////////////Saving current job in local storage when changed for display on page 2\n  useEffect(() => {\n    localStorage.setItem(\"currentJob\", curJob);\n  }, [curJob]);\n\n  ///Retrivin Jobs from local storage on initial render\n  useEffect(() => {\n    const savedJobs = window.localStorage.getItem(\"jobs\");\n    console.log(savedJobs);\n    if (savedJobs) {\n      if (savedJobs.includes(\",\")) {\n        const array = savedJobs.split(\",\");\n        setJobName(array);\n        setCurJob(array[0]);\n      } else {\n        let x = [];\n        x.push(savedJobs);\n        setJobName(x);\n        setCurJob(savedJobs);\n      }\n    }\n  }, []);\n\n  //////////////////////initial animation\n  const springProps = useSpring({ opacity: addJob ? 0 : 1 });\n\n  //////////////////////////////////////////////////////////////////\n  const catchName = (name) => {\n    ///first check if name is enetered\n    /// check that there is no duplicates in name\n    if (name.length > 0) {\n      if (Array.isArray(jobName) && !jobName.includes(name)) {\n        setJobName([...jobName, name]);\n      } else if (!Array.isArray(jobName)) {\n        let x = [];\n        x.push(name);\n        setJobName(x);\n      } else {\n        /// show alert pointing why you cant enetr name\n        /// either you didnt type anything or name already exists\n        if (jobName.includes(name)) {\n          alert(\"Posao s tim imenom vec postoji\");\n        }\n      }\n      setCurJob(name);\n      setAddJob(false);\n    }\n  };\n\n  /////code for saving jobs from state in local storage\n\n  useEffect(() => {\n    if (jobName) {\n      localStorage.setItem(\"jobs\", jobName);\n    } else {\n      localStorage.removeItem(\"jobs\");\n    }\n  }, [jobName]);\n  //////////////////////////////////////////////////////////\n\n  const addJobClick = () => {\n    setAddJob(true);\n  };\n\n  const deleteJobClick = () => {\n    if (window.confirm(`Izbrisi ${curJob}?`)) {\n      if (jobName && jobName.length > 1) {\n        let filteredAry = jobName.filter((e) => e !== curJob);\n        setJobName(filteredAry);\n        setCurJob(filteredAry[0]);\n      } else {\n        setJobName(null);\n        setCurJob(null);\n      }\n    }\n  };\n  ////////////////////////////////////////////////////////\n  const catchData = (dateObj, workHours, startEndTime) => {\n    const finalObj = {\n      job: curJob,\n      month: dateObj.month,\n      day: dateObj.day,\n      dayName: dateObj.dayName,\n      workHours: workHours,\n      startTime: startEndTime.startTime,\n      endTime: startEndTime.endTime,\n    };\n\n    const retrivedObj = JSON.parse(localStorage.getItem(dateObj.year));\n\n    if (Array.isArray(retrivedObj)) {\n      retrivedObj.push(finalObj);\n      let objForSaving = JSON.stringify(retrivedObj);\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else if (dateObj.year in localStorage) {\n      console.log(retrivedObj);\n      let x = new Array();\n      console.log(typeof x);\n\n      x.push(retrivedObj);\n\n      x.push(finalObj);\n      let objForSaving = JSON.stringify(x);\n\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else {\n      let x = [];\n      let storageArr = JSON.stringify(finalObj);\n      console.log(storageArr);\n      localStorage.setItem(dateObj.year, storageArr);\n    }\n    setChangeOfH(!chageOfH);\n  };\n  ///////////////////////////////////////////////////////////////////////////////////////\n  const backName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n    console.log(curIndex);\n\n    if (curIndex - 1 < 0) {\n      setCurJob(jobName[jobName.length - 1]);\n    } else {\n      setCurJob(jobName[curIndex - 1]);\n    }\n  };\n\n  const fowardName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n\n    if (curIndex + 1 > jobName.length - 1) {\n      setCurJob(jobName[0]);\n    } else {\n      setCurJob(jobName[curIndex + 1]);\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n  const jobDisplay = (\n    <div className=\"jobDispl\">\n      {jobName && jobName.length > 1 && (\n        <span className=\"material-icons jobArrow\" onClick={backName}>\n          arrow_back_ios\n        </span>\n      )}\n\n      <h4 id=\"jN\">{curJob}</h4>\n      {jobName && jobName.length > 1 && (\n        <span className=\"material-icons jobArrow\" onClick={fowardName}>\n          arrow_forward_ios\n        </span>\n      )}\n    </div>\n  );\n  ////////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"FirstPage\">\n      {jobName && (\n        <div>\n          <button id=\"addJob\" onClick={addJobClick}>\n            Dodaj posao\n          </button>\n          <button id=\"removeJob\" onClick={deleteJobClick}>\n            Izbrisi posao\n          </button>\n        </div>\n      )}\n      {jobName ? jobDisplay : <NameJob catchName={catchName} />}\n      {addJob && <NameJob catchName={catchName} />}\n\n      {jobName && (\n        <animated.div style={springProps}>\n          <DateNav catchData={catchData} curJob={curJob} />\n        </animated.div>\n      )}\n      {jobName && <DisplayThisMonthHours curJob={curJob} change={chageOfH} />}\n    </div>\n  );\n}\n\nexport default FirstPage;\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js",["56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":4,"column":42,"nodeType":"64","messageId":"65","endLine":4,"endColumn":46},{"ruleId":"66","severity":1,"message":"67","line":51,"column":6,"nodeType":"68","endLine":51,"endColumn":18,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":96,"column":6,"nodeType":"68","endLine":96,"endColumn":29,"suggestions":"71"},{"ruleId":"62","severity":1,"message":"72","line":17,"column":9,"nodeType":"64","messageId":"65","endLine":17,"endColumn":14},{"ruleId":"73","severity":1,"message":"74","line":49,"column":11,"nodeType":"75","messageId":"76","endLine":49,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":60,"column":18,"nodeType":"75","messageId":"76","endLine":60,"endColumn":20},{"ruleId":"62","severity":1,"message":"77","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"79","line":11,"column":31,"nodeType":"80","messageId":"81","endLine":11,"endColumn":33},{"ruleId":"82","severity":1,"message":"83","line":110,"column":15,"nodeType":"84","messageId":"85","endLine":110,"endColumn":26},{"ruleId":"62","severity":1,"message":"86","line":120,"column":11,"nodeType":"64","messageId":"65","endLine":120,"endColumn":12},{"ruleId":"62","severity":1,"message":"87","line":1,"column":27,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"79","line":21,"column":33,"nodeType":"80","messageId":"81","endLine":21,"endColumn":35},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatDate'. Either include it or remove the dependency array.","ArrayExpression",["90"],"React Hook useEffect has a missing dependency: 'selectedTimes.startTime'. Either include it or remove the dependency array.",["91"],"'props' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'x' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [clickCount, formatDate]",{"range":"96","text":"97"},"Update the dependencies array to be: [selectedTimes.endTime, selectedTimes.startTime]",{"range":"98","text":"99"},[1786,1798],"[clickCount, formatDate]",[3172,3195],"[selectedTimes.endTime, selectedTimes.startTime]"]