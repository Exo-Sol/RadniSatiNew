[{"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js":"1","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js":"2","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js":"3","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js":"4","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js":"5","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js":"6","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js":"7","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\FirstPage.js":"8","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js":"9","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js":"10","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js":"11","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js":"12","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\Delete.js":"13","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js":"14","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\Page2.js":"15","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\index.js":"16","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\App.js":"17","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\FirstPage.js":"18","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\Page2.js":"19","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\SecondPage.js":"20","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\DateNav.js":"21","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\DisplayThisMonthHours.js":"22","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\addRenameJob\\NameJob.js":"23","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\MainDiv.js":"24","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\Delete.js":"25","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js":"26","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\PopUp.js":"27","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\HList.js":"28","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js":"29","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js":"30","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\index.js":"31","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\App.js":"32","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\FirstPage.js":"33","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\Page2.js":"34","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\SecondPage.js":"35","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\DisplayThisMonthHours.js":"36","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\DateNav.js":"37","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\addRenameJob\\NameJob.js":"38","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\MainDiv.js":"39","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js":"40","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\Delete.js":"41","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\PopUp.js":"42","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\HList.js":"43","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js":"44","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js":"45"},{"size":198,"mtime":1612353468344,"results":"46","hashOfConfig":"47"},{"size":2417,"mtime":1613644437470,"results":"48","hashOfConfig":"47"},{"size":5854,"mtime":1613664404703,"results":"49","hashOfConfig":"47"},{"size":2638,"mtime":1613041401678,"results":"50","hashOfConfig":"47"},{"size":364,"mtime":1612357701466,"results":"51","hashOfConfig":"47"},{"size":815,"mtime":1611830727444,"results":"52","hashOfConfig":"47"},{"size":845,"mtime":1613063226541,"results":"53","hashOfConfig":"47"},{"size":6663,"mtime":1613590929675,"results":"54","hashOfConfig":"47"},{"size":4375,"mtime":1613665177530,"results":"55","hashOfConfig":"47"},{"size":1989,"mtime":1612986874319,"results":"56","hashOfConfig":"47"},{"size":362,"mtime":1612983354825,"results":"57","hashOfConfig":"47"},{"size":1041,"mtime":1613060752924,"results":"58","hashOfConfig":"47"},{"size":3438,"mtime":1613481786115,"results":"59","hashOfConfig":"47"},{"size":563,"mtime":1613591350011,"results":"60","hashOfConfig":"47"},{"size":381,"mtime":1613650690415,"results":"61","hashOfConfig":"47"},{"size":198,"mtime":1612353468344,"results":"62","hashOfConfig":"63"},{"size":2417,"mtime":1613644437470,"results":"64","hashOfConfig":"63"},{"size":6837,"mtime":1613672975253,"results":"65","hashOfConfig":"63"},{"size":381,"mtime":1613650690415,"results":"66","hashOfConfig":"63"},{"size":4452,"mtime":1613739102917,"results":"67","hashOfConfig":"63"},{"size":6131,"mtime":1613740171235,"results":"68","hashOfConfig":"63"},{"size":845,"mtime":1613063226541,"results":"69","hashOfConfig":"63"},{"size":815,"mtime":1611830727444,"results":"70","hashOfConfig":"63"},{"size":1989,"mtime":1612986874319,"results":"71","hashOfConfig":"63"},{"size":3492,"mtime":1613739431830,"results":"72","hashOfConfig":"63"},{"size":563,"mtime":1613591350011,"results":"73","hashOfConfig":"63"},{"size":364,"mtime":1612357701466,"results":"74","hashOfConfig":"63"},{"size":3050,"mtime":1613737696298,"results":"75","hashOfConfig":"63"},{"size":362,"mtime":1612983354825,"results":"76","hashOfConfig":"63"},{"size":1041,"mtime":1613060752924,"results":"77","hashOfConfig":"63"},{"size":287,"mtime":1613754063991,"results":"78","hashOfConfig":"79"},{"size":2420,"mtime":1613753278108,"results":"80","hashOfConfig":"79"},{"size":6848,"mtime":1613994061455,"results":"81","hashOfConfig":"79"},{"size":381,"mtime":1613650690415,"results":"82","hashOfConfig":"79"},{"size":4452,"mtime":1613739102917,"results":"83","hashOfConfig":"79"},{"size":845,"mtime":1613063226541,"results":"84","hashOfConfig":"79"},{"size":6131,"mtime":1613740171235,"results":"85","hashOfConfig":"79"},{"size":815,"mtime":1613995226656,"results":"86","hashOfConfig":"79"},{"size":1989,"mtime":1612986874319,"results":"87","hashOfConfig":"79"},{"size":563,"mtime":1613591350011,"results":"88","hashOfConfig":"79"},{"size":3492,"mtime":1613739431830,"results":"89","hashOfConfig":"79"},{"size":364,"mtime":1612357701466,"results":"90","hashOfConfig":"79"},{"size":3050,"mtime":1613737696298,"results":"91","hashOfConfig":"79"},{"size":362,"mtime":1612983354825,"results":"92","hashOfConfig":"79"},{"size":1041,"mtime":1613060752924,"results":"93","hashOfConfig":"79"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"lqlpn9",{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"96"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"96"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},"d6wkh8",{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"135"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"135"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"135"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"135"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"135"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"135"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"135"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},"19q48eu",{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"172"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"172"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"172"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"172"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"172"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"172"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"172"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js",[],["204","205"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js",["206"],"import React, { useState } from \"react\";\r\nimport FirstPage from \"./FirstPage\";\r\nimport SecondPage from \"./seconPage/SecondPage\";\r\nimport Page2 from \"./components/Page2\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport SwipeableRoutes from \"react-swipeable-routes\";\r\n\r\nconst App = () => {\r\n  // to indicate change in added time to pase change notification to second ppage\r\n  const [change, setChange] = useState(false);\r\n  // when you \"nuke\" delete all data, to delete jobs enered in state also\r\n  const [nukeAll, setNukeAll] = useState(false);\r\n\r\n  const onAddedTime = (nuke = false) => {\r\n    setChange(!change);\r\n    if (nuke) {\r\n      setNukeAll(!nukeAll);\r\n      console.log();\r\n    }\r\n  };\r\n  //  const FirstPage = <FirstPage onAddedTime={onAddedTime} />;\r\n  const dateObj = new Date();\r\n  const year = dateObj.getFullYear();\r\n  const retrivedObj = localStorage.getItem(year);\r\n\r\n  return (\r\n    <>\r\n      {/* conditional rendering so it dosent display table when there is no entry, this happens at the very start of use */}\r\n      {retrivedObj ? (\r\n        <Router>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    nuke={nukeAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                path=\"/second\"\r\n                render={(props) => (\r\n                  <SecondPage\r\n                    {...props}\r\n                    change={change}\r\n                    onAddedTime={onAddedTime}\r\n                  />\r\n                )}\r\n              />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </Router>\r\n      ) : (\r\n        <Router>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    nuke={nukeAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route path=\"/second\" render={(props) => <Page2 />} />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </Router>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DateNav.js",["207","208"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport HList from \"../components/HList\";\r\n\r\nimport \"../styles/mainStyle.css\";\r\n\r\nimport PopUp from \"./PopUp\";\r\n\r\nconst DateNav = ({ catchData, curJob, catchD }) => {\r\n  const [clickCount, setClickCount] = useState(0);\r\n\r\n  //////////DATE FORMARING//////////////////////////\r\n  //////////////////////////////////////////////////\r\n  const formatDate = (count) => {\r\n    const dateObj = new Date(),\r\n      dayNames = [\"Ned\", \"Pon\", \"Uto\", \"Sri\", \"Cet\", \"Pet\", \"Sub\"];\r\n    if (clickCount !== 0) {\r\n      console.log(\"dohvaceno\");\r\n      dateObj.setDate(new Date().getDate() + count);\r\n    }\r\n\r\n    return {\r\n      year: dateObj.getFullYear(),\r\n      day: dateObj.getDate(),\r\n      month: dateObj.getMonth() + 1,\r\n      dayName: dayNames[dateObj.getDay()],\r\n    };\r\n  };\r\n  //////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedDay, setSelectedDay] = useState(formatDate());\r\n  ///////////////////////////////////////////////////////////////\r\n  const [workHours, setWorkHours] = useState(undefined);\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedTimes, setSelectedTimes] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n  });\r\n  //////////////////////////////////////////////////////////////\r\n  const [popUpState, setPopUpState] = useState(false);\r\n\r\n  ////////////////////////ANIMATION///////////////////////////////////////\r\n\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  // settin the displayed date <_> clicking day back or foward is hooked with useEffect to change state\r\n  //witch is date displayed visualy\r\n\r\n  useEffect(() => {\r\n    setSelectedDay(formatDate(clickCount));\r\n  }, [clickCount]);\r\n\r\n  const dayFoward = () => {\r\n    setClickCount((count) => count + 1);\r\n  };\r\n\r\n  const dayBack = () => {\r\n    setClickCount((count) => count - 1);\r\n  };\r\n\r\n  /////////////JSX variables/////////////////////////////////\r\n\r\n  const backArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayBack}>\r\n      arrow_back_ios\r\n    </span>\r\n  );\r\n\r\n  const fwdArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayFoward}>\r\n      arrow_forward_ios\r\n    </span>\r\n  );\r\n  /////////////////////////////////////////////////////////\r\n  const clickHour = (e) => {\r\n    if (!selectedTimes.startTime) {\r\n      setSelectedTimes({ ...selectedTimes, startTime: e.target.textContent });\r\n    } else if (!selectedTimes.endTime) {\r\n      // make unable to select end time lower than start time\r\n      if (parseInt(e.target.textContent) > parseInt(selectedTimes.startTime)) {\r\n        setSelectedTimes({ ...selectedTimes, endTime: e.target.textContent });\r\n      }\r\n    }\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      if (selectedTimes.endTime !== null) {\r\n        let derivedWorkHours = selectedTimes.endTime - selectedTimes.startTime;\r\n        setWorkHours(derivedWorkHours);\r\n      }\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [selectedTimes.endTime]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  const hoursChange = (e) => {\r\n    setWorkHours(e.target.value);\r\n  };\r\n\r\n  //////////////////////////////////\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      workHours > 24 ||\r\n      workHours < 0 ||\r\n      workHours === \"\" ||\r\n      workHours === undefined\r\n    ) {\r\n      alert(\"Netocno uneseni sati\");\r\n    } else if (workHours !== 0) {\r\n      catchData(selectedDay, workHours, selectedTimes);\r\n\r\n      setSelectedTimes({\r\n        startTime: null,\r\n        endTime: null,\r\n      });\r\n      /////////////////////////\r\n      setPopUpState(true);\r\n      setTimeout(() => {\r\n        setPopUpState(false);\r\n      }, 800);\r\n    }\r\n  };\r\n  /////////////////////////////////////////////\r\n  const clickDelete = () => {\r\n    setWorkHours(\"\");\r\n    setSelectedTimes({\r\n      startTime: null,\r\n      endTime: null,\r\n    });\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <div className=\"popUpWrapper\">\r\n        {popUpState ? <PopUp curJob={curJob} /> : <div></div>}\r\n      </div>\r\n      <div className=\"dateNav\">\r\n        {backArrow}\r\n\r\n        <span id=\"animateDate\">{`${selectedDay.dayName}, ${selectedDay.day}/${selectedDay.month}`}</span>\r\n        {fwdArrow}\r\n      </div>\r\n      <div className=\"flexWrapNav\">\r\n        <input\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          className=\"inputField\"\r\n          name=\"workHours\"\r\n          placeholder=\"Radni sati\"\r\n          value={workHours}\r\n          onChange={hoursChange}\r\n          style={{ display: \"block\" }}\r\n          autoFocus={true}\r\n          onKeyDown={(evt) =>\r\n            [\"e\", \"E\", \"+\", \"-\", \".\"].includes(evt.key) && evt.preventDefault()\r\n          }\r\n        />\r\n        <br />\r\n        <div className=\"flexWrapButtons\">\r\n          <input\r\n            type=\"submit\"\r\n            onClick={onSubmit}\r\n            value=\"Save\"\r\n            id=\"save\"\r\n            className=\"buttons\"\r\n          />\r\n\r\n          <button id=\"delete\" onClick={clickDelete} className=\"buttons\">\r\n            Del\r\n          </button>\r\n        </div>\r\n        <div className=\"hourPad\">\r\n          <HList\r\n            clickHour={clickHour}\r\n            selectedTimes={selectedTimes}\r\n            catchD={catchD}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DateNav;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\HList.js",["209","210","211"],"import React, { useState } from \"react\";\r\nimport { useSpring, animated, useTransition } from \"react-spring\";\r\nimport \"../styles/mainStyle.css\";\r\n\r\nconst HList = ({ clickHour, selectedTimes, catchD }) => {\r\n  // const clickedBtn = (e) => {\r\n  //   clickHour\r\n  //   console.log(e.target.textContent);\r\n  // };\r\n\r\n  // create an array of jobe time stamps, for now\r\n  const arr = [];\r\n  ////////////////////////\r\n  const [displaySelector, changeDisplySelector] = useState(false);\r\n\r\n  /////////////////////////////ANIMATION///////////////////////////////////////\r\n  const props = useSpring({\r\n    config: { duration: 1250 },\r\n    opacity: 1,\r\n    from: { opacity: 0 },\r\n  });\r\n\r\n  const transitions = useTransition(displaySelector, null, {\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  });\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  const startStyle = {\r\n    backgroundColor: \"#5de6da\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const endStyle = {\r\n    backgroundColor: \"#ee3968\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const resetSyle = {\r\n    border: \"gray 1px solid\",\r\n    color: \"black\",\r\n    backgroundColor: \"#fafad2\",\r\n  };\r\n\r\n  for (let i = 7; i <= 24; i++) {\r\n    if (i == selectedTimes.startTime) {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={startStyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else if (i == selectedTimes.endTime) {\r\n      arr.push(\r\n        <h1 onClick={clickHour} className=\"numberList\" style={endStyle} key={i}>\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={resetSyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    }\r\n  }\r\n\r\n  const hClick = () => {\r\n    changeDisplySelector(!displaySelector);\r\n    catchD();\r\n  };\r\n\r\n  return displaySelector ? (\r\n    transitions.map(\r\n      ({ item, key, props }) =>\r\n        item && (\r\n          <animated.div className=\"hourSelect\" key={key} style={props}>\r\n            {arr}\r\n            <span\r\n              className=\"material-icons numberList hButton\"\r\n              onClick={hClick}\r\n              style={resetSyle}\r\n            >\r\n              eject\r\n            </span>\r\n          </animated.div>\r\n        )\r\n    )\r\n  ) : (\r\n    <span\r\n      className=\"material-icons numberList hButton\"\r\n      onClick={hClick}\r\n      style={resetSyle}\r\n    >\r\n      query_builder\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default HList;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\PopUp.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\DisplayThisMonthHours.js",["212","213"],"import React, { useState } from \"react\";\r\n\r\nconst DisplayThisMonthHours = ({ curJob }) => {\r\n  const dateObj = new Date();\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  const month = dateObj.getMonth() + 1;\r\n\r\n  let totalH = 0;\r\n  if (retriveArr && Array.isArray(retriveArr)) {\r\n    retriveArr.map((ele, ind) => {\r\n      if (ele.month === parseInt(month) && ele.job === curJob) {\r\n        totalH += parseInt(ele.workHours);\r\n      }\r\n    });\r\n  } else if (retriveArr) {\r\n    totalH += parseInt(retriveArr.workHours);\r\n  }\r\n\r\n  let stringTotalH = totalH.toString();\r\n  let lastChar = +stringTotalH.slice(-1);\r\n\r\n  return (\r\n    <div className=\"displInfoMain\">{`${totalH} ${\r\n      lastChar === 1 ? \"sat\" : \"sati\"\r\n    } u ${month} mj. (${curJob}) `}</div>\r\n  );\r\n};\r\n\r\nexport default DisplayThisMonthHours;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\FirstPage.js",["214","215","216"],"import React, { useState, useEffect } from \"react\";\nimport DateNav from \"./components/DateNav\";\nimport NameJob from \"./components/addRenameJob/NameJob\";\nimport DisplayThisMonthHours from \"./components/DisplayThisMonthHours\";\nimport { useSpring, animated } from \"react-spring\";\n\nfunction FirstPage({ onAddedTime, nuke }) {\n  const [jobName, setJobName] = useState(null);\n  const [curJob, setCurJob] = useState(null);\n  const [addJob, setAddJob] = useState(false);\n  /// to force update on hours in a month\n  const [chageOfH, setChangeOfH] = useState(false);\n  // to toggle of display thismonthhours\n  const [displaySwitch, setDisplaySwitch] = useState(true);\n  /////////////////////Saving current job in local storage when changed for display on page 2\n  useEffect(() => {\n    localStorage.setItem(\"currentJob\", curJob);\n    /// indicate change for second page\n    /////////////////////////////////////\n    ///////////////////////////////////////\n    onAddedTime();\n  }, [curJob]);\n\n  useEffect(() => {\n    setJobName(null);\n    setCurJob(null);\n  }, [nuke]);\n\n  ///Retrivin Jobs from local storage on initial render\n  useEffect(() => {\n    const savedJobs = window.localStorage.getItem(\"jobs\");\n    console.log(savedJobs);\n    if (savedJobs) {\n      if (savedJobs.includes(\",\")) {\n        const array = savedJobs.split(\",\");\n        setJobName(array);\n        setCurJob(array[0]);\n      } else {\n        let x = [];\n        x.push(savedJobs);\n        setJobName(x);\n        setCurJob(savedJobs);\n      }\n    }\n  }, []);\n\n  //////////////////////initial animation\n  const springProps = useSpring({ opacity: addJob ? 0 : 1 });\n\n  //////////////////////////////////////////////////////////////////\n  const catchName = (name) => {\n    ///first check if name is enetered\n    /// check that there is no duplicates in name\n    if (name.length > 0) {\n      if (Array.isArray(jobName) && !jobName.includes(name)) {\n        setJobName([...jobName, name]);\n      } else if (!Array.isArray(jobName)) {\n        let x = [];\n        x.push(name);\n        setJobName(x);\n      } else {\n        /// show alert pointing why you cant enetr name\n        /// either you didnt type anything or name already exists\n        if (jobName.includes(name)) {\n          alert(\"Posao s tim imenom vec postoji\");\n        }\n      }\n      setCurJob(name);\n      setAddJob(false);\n    }\n  };\n\n  /////code for saving jobs from state in local storage\n\n  useEffect(() => {\n    if (jobName) {\n      localStorage.setItem(\"jobs\", jobName);\n    } else {\n      localStorage.removeItem(\"jobs\");\n    }\n  }, [jobName]);\n  //////////////////////////////////////////////////////////\n\n  const addJobClick = () => {\n    setAddJob(true);\n  };\n\n  const deleteJobClick = () => {\n    if (window.confirm(`Izbrisi ${curJob}?`)) {\n      if (jobName && jobName.length > 1) {\n        let filteredAry = jobName.filter((e) => e !== curJob);\n        setJobName(filteredAry);\n        setCurJob(filteredAry[0]);\n      } else {\n        setJobName(null);\n        setCurJob(null);\n      }\n    }\n  };\n  ////////////////////////////////////////////////////////\n  const catchData = (dateObj, workHours, startEndTime) => {\n    const finalObj = startEndTime.startTime\n      ? {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: startEndTime.startTime,\n          endTime: startEndTime.endTime,\n        }\n      : {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: \"#\",\n          endTime: \"#\",\n        };\n\n    const retrivedObj = JSON.parse(localStorage.getItem(dateObj.year));\n\n    if (Array.isArray(retrivedObj)) {\n      retrivedObj.push(finalObj);\n      let objForSaving = JSON.stringify(retrivedObj);\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else if (dateObj.year in localStorage) {\n      console.log(retrivedObj);\n      let x = new Array();\n      console.log(typeof x);\n\n      x.push(retrivedObj);\n\n      x.push(finalObj);\n      let objForSaving = JSON.stringify(x);\n\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else {\n      let x = [];\n      let storageArr = JSON.stringify(finalObj);\n      console.log(storageArr);\n      localStorage.setItem(dateObj.year, storageArr);\n    }\n    setChangeOfH(!chageOfH);\n    /// indicate change for second page\n    onAddedTime();\n    console.log(\"to mi treba tommy\");\n  };\n  ///////////////////////////////////////////////////////////////////////////////////////\n  const backName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n    console.log(curIndex);\n\n    if (curIndex - 1 < 0) {\n      setCurJob(jobName[jobName.length - 1]);\n    } else {\n      setCurJob(jobName[curIndex - 1]);\n    }\n  };\n\n  const fowardName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n\n    if (curIndex + 1 > jobName.length - 1) {\n      setCurJob(jobName[0]);\n    } else {\n      setCurJob(jobName[curIndex + 1]);\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n  const jobDisplay = (\n    <div className=\"jobDispl\">\n      {jobName && jobName.length > 1 && (\n        <span className=\"material-icons jobArrow\" onClick={backName}>\n          arrow_back_ios\n        </span>\n      )}\n\n      <h4 id=\"jN\">{curJob}</h4>\n      {jobName && jobName.length > 1 && (\n        <span className=\"material-icons jobArrow\" onClick={fowardName}>\n          arrow_forward_ios\n        </span>\n      )}\n    </div>\n  );\n  ////////////////////////////////////////////////////////////////////////////\n  const catchDropdown = () => {\n    setDisplaySwitch(!displaySwitch);\n  };\n\n  ///////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"FirstPage\">\n      {jobName && (\n        <div>\n          <button id=\"addJob\" onClick={addJobClick}>\n            Dodaj posao\n          </button>\n          <button id=\"removeJob\" onClick={deleteJobClick}>\n            Izbrisi posao\n          </button>\n        </div>\n      )}\n      {jobName ? jobDisplay : <NameJob catchName={catchName} />}\n      {addJob && <NameJob catchName={catchName} />}\n\n      {jobName && (\n        <animated.div style={springProps}>\n          <DateNav\n            catchData={catchData}\n            curJob={curJob}\n            catchD={catchDropdown}\n          />\n        </animated.div>\n      )}\n      {jobName && displaySwitch && (\n        <DisplayThisMonthHours curJob={curJob} change={chageOfH} />\n      )}\n    </div>\n  );\n}\n\nexport default FirstPage;\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js",["217","218","219","220","221","222"],"import React, { useState, useEffect } from \"react\";\r\nimport MainDiv from \"./components2/MainDiv\";\r\nimport Delete from \"./components2/Delete\";\r\nimport NukeStorage from \"./components2/NukeStorage\";\r\nimport \"./styles2/styles.css\";\r\n\r\nconst SecondPage = ({ change, onAddedTime }) => {\r\n  const [toggleDropdown, setToggleDropdown] = useState(false);\r\n\r\n  /////////////////////////////getting JObs\r\n  /////////////////////////////////////////////////////////\r\n\r\n  const currentJob = localStorage.getItem(\"currentJob\");\r\n  //////////////////////////////\r\n  /////////Need to set cur job so it changes before usefeect for getting relevan array\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n  const dateObj = new Date();\r\n  const [curJob, setCurJob] = useState(currentJob);\r\n  const [linkEffect, setLinkEffect] = useState(false);\r\n  const [month, setMonth] = useState(dateObj.getMonth() + 1);\r\n  const [relevantShifts, setRelevantShifts] = useState([]);\r\n\r\n  ///////////////////////////////////////////////////////////////////\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    setCurJob(() => currentJob);\r\n    setRelevantShifts(() => []);\r\n    console.log(\"masta\");\r\n    setLinkEffect(!linkEffect);\r\n  }, [change]);\r\n  ////////////////////////////////////////////////////////////\r\n  const monthsWorked = new Set();\r\n\r\n  //////////////// populate dropdown with avaliable months /////////////////////////////////////////\r\n  if (retriveArr) {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === currentJob) {\r\n          monthsWorked.add(ele.month);\r\n        }\r\n      });\r\n    } else {\r\n      monthsWorked.add(retriveArr.month);\r\n    }\r\n  }\r\n  /////////////////////////////\r\n  const newMonthArr = [];\r\n\r\n  monthsWorked.forEach((ele) => newMonthArr.push(parseInt(ele)));\r\n\r\n  console.log(monthsWorked);\r\n\r\n  newMonthArr.sort((a, b) => a - b);\r\n\r\n  console.log(newMonthArr);\r\n  ///////////////////////////////udating relevant data when month change or user inputs something on first page/////////////////////////////////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === curJob && ele.month === month) {\r\n          setRelevantShifts((relevantShifts) => [...relevantShifts, ele]);\r\n        }\r\n      });\r\n    } else if (retriveArr) {\r\n      if (retriveArr.job === curJob && retriveArr.month === month) {\r\n        setRelevantShifts([retriveArr]);\r\n      }\r\n    }\r\n  }, [month]);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === curJob && ele.month === month) {\r\n          setRelevantShifts((relevantShifts) => [...relevantShifts, ele]);\r\n          console.log(curJob);\r\n        }\r\n      });\r\n    } else if (retriveArr) {\r\n      if (retriveArr.job === curJob && retriveArr.month === month) {\r\n        setRelevantShifts([retriveArr]);\r\n        console.log(curJob);\r\n      }\r\n    } else {\r\n      setRelevantShifts([]);\r\n    }\r\n    console.log(\"kokikoki\");\r\n  }, [linkEffect]);\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  const dropDown = () => {\r\n    setToggleDropdown(!toggleDropdown);\r\n  };\r\n\r\n  const setClickedMonth = (e) => {\r\n    e.preventDefault(); // maybe\r\n    setMonth(parseInt(e.target.innerText));\r\n    if (month !== parseInt(e.target.innerText)) {\r\n      setRelevantShifts([]);\r\n    }\r\n    setToggleDropdown(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"curJob\">{curJob}</div>\r\n      <ul className=\"monthWhole\">\r\n        <li className=\"material-icons icons\" onClick={dropDown}>\r\n          arrow_drop_down_circle <p id=\"dropMonths\">Mjesec {month}</p>\r\n        </li>\r\n        {toggleDropdown &&\r\n          newMonthArr.map((ele, ind) => (\r\n            <li key={ind} className=\"monthList\" onClick={setClickedMonth}>\r\n              {ele}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      {!toggleDropdown && <MainDiv data={relevantShifts} />}\r\n      <Delete relevantShifts={relevantShifts} onAddedTime={onAddedTime} />\r\n      <NukeStorage onAddedTime={onAddedTime} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SecondPage;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js",[],["223","224"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\Delete.js",["225","226"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst Delete = ({ relevantShifts, onAddedTime }) => {\r\n  const [clickedDel, setClickedDel] = useState(false);\r\n  const [deleteInput, setDeleteInput] = useState(undefined);\r\n  const [forSaving, setForSaving] = useState([]);\r\n  const dateObj = new Date();\r\n\r\n  useEffect(() => {\r\n    if (forSaving && forSaving.length > 0) {\r\n      let objForSaving = JSON.stringify(forSaving);\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      localStorage.setItem(dateObj.getFullYear(), objForSaving);\r\n      onAddedTime();\r\n      setDeleteInput(undefined);\r\n    } else if (forSaving === undefined) {\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      onAddedTime();\r\n    }\r\n  }, [forSaving]);\r\n\r\n  const firstClickDel = () => {\r\n    setForSaving([]);\r\n    console.log(relevantShifts.length);\r\n    console.log(parseInt(deleteInput));\r\n    if (parseInt(deleteInput) <= relevantShifts.length) {\r\n      // delete that data, update page\r\n      delSelectedData(relevantShifts[parseInt(deleteInput) - 1]);\r\n\r\n      console.log(\"tu smo maci\");\r\n    }\r\n    setClickedDel(!clickedDel);\r\n  };\r\n\r\n  const numInput = (e) => {\r\n    setDeleteInput(e.target.value);\r\n  };\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const contentProps = useSpring({\r\n    opacity: clickedDel ? 1 : 0,\r\n    marginLeft: clickedDel ? 0 : -300,\r\n  });\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const delSelectedData = (data) => {\r\n    console.log(data);\r\n    const dateObj = new Date();\r\n    const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n    console.log(retriveArr);\r\n    if (Array.isArray(retriveArr) && retriveArr.length > 1) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (JSON.stringify(ele) !== JSON.stringify(data)) {\r\n          console.log(\"hit that\");\r\n          setForSaving((forSaving) => [...forSaving, ele]);\r\n        }\r\n      });\r\n    } else {\r\n      console.log(\"a moramo bit ovdi\");\r\n      setForSaving(undefined);\r\n\r\n      setDeleteInput(undefined);\r\n    }\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"deleteDiv\">\r\n      <span\r\n        className=\"material-icons icons\"\r\n        id=\"deleteIcon\"\r\n        onClick={firstClickDel}\r\n      >\r\n        delete\r\n      </span>\r\n      {clickedDel && (\r\n        <animated.input\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          className=\"inputField\"\r\n          id=\"delPlaceholder\"\r\n          name=\"workHours\"\r\n          placeholder=\"Br?\"\r\n          value={deleteInput}\r\n          onChange={numInput}\r\n          style={contentProps}\r\n          autoFocus={true}\r\n          onKeyDown={(evt) =>\r\n            [\"e\", \"E\", \"+\", \"-\", \"0\"].includes(evt.key) && evt.preventDefault()\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Delete;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\Page2.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\index.js",[],["227","228"],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\App.js",["229"],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\FirstPage.js",["230","231","232"],"import React, { useState, useEffect } from \"react\";\nimport DateNav from \"./components/DateNav\";\nimport NameJob from \"./components/addRenameJob/NameJob\";\nimport DisplayThisMonthHours from \"./components/DisplayThisMonthHours\";\nimport { useSpring, animated } from \"react-spring\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\n\nfunction FirstPage({ onAddedTime, nuke }) {\n  const [jobName, setJobName] = useState(null);\n  const [curJob, setCurJob] = useState(null);\n  const [addJob, setAddJob] = useState(false);\n  /// to force update on hours in a month\n  const [chageOfH, setChangeOfH] = useState(false);\n  // to toggle of display thismonthhours\n  const [displaySwitch, setDisplaySwitch] = useState(true);\n  /////////////////////Saving current job in local storage when changed for display on page 2\n  useEffect(() => {\n    localStorage.setItem(\"currentJob\", curJob);\n    /// indicate change for second page\n    /////////////////////////////////////\n    ///////////////////////////////////////\n    onAddedTime();\n  }, [curJob]);\n\n  useEffect(() => {\n    setJobName(null);\n    setCurJob(null);\n  }, [nuke]);\n\n  ///Retrivin Jobs from local storage on initial render\n  useEffect(() => {\n    const savedJobs = window.localStorage.getItem(\"jobs\");\n    console.log(savedJobs);\n    if (savedJobs) {\n      if (savedJobs.includes(\",\")) {\n        const array = savedJobs.split(\",\");\n        setJobName(array);\n        setCurJob(array[0]);\n      } else {\n        let x = [];\n        x.push(savedJobs);\n        setJobName(x);\n        setCurJob(savedJobs);\n      }\n    }\n  }, []);\n\n  //////////////////////initial animation\n  const springProps = useSpring({ opacity: addJob ? 0 : 1 });\n\n  //////////////////////////////////////////////////////////////////\n  const catchName = (name) => {\n    ///first check if name is enetered\n    /// check that there is no duplicates in name\n    if (name.length > 0) {\n      if (Array.isArray(jobName) && !jobName.includes(name)) {\n        setJobName([...jobName, name]);\n      } else if (!Array.isArray(jobName)) {\n        let x = [];\n        x.push(name);\n        setJobName(x);\n      } else {\n        /// show alert pointing why you cant enetr name\n        /// either you didnt type anything or name already exists\n        if (jobName.includes(name)) {\n          alert(\"Posao s tim imenom vec postoji\");\n        }\n      }\n      setCurJob(name);\n      setAddJob(false);\n    }\n  };\n\n  /////code for saving jobs from state in local storage\n\n  useEffect(() => {\n    if (jobName) {\n      localStorage.setItem(\"jobs\", jobName);\n    } else {\n      localStorage.removeItem(\"jobs\");\n    }\n  }, [jobName]);\n  //////////////////////////////////////////////////////////\n\n  const addJobClick = () => {\n    setAddJob(true);\n  };\n\n  const deleteJobClick = () => {\n    if (window.confirm(`Izbrisi ${curJob}?`)) {\n      if (jobName && jobName.length > 1) {\n        let filteredAry = jobName.filter((e) => e !== curJob);\n        setJobName(filteredAry);\n        setCurJob(filteredAry[0]);\n      } else {\n        setJobName(null);\n        setCurJob(null);\n      }\n    }\n  };\n  ////////////////////////////////////////////////////////\n  const catchData = (dateObj, workHours, startEndTime) => {\n    const finalObj = startEndTime.startTime\n      ? {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: startEndTime.startTime,\n          endTime: startEndTime.endTime,\n        }\n      : {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: \"#\",\n          endTime: \"#\",\n        };\n\n    const retrivedObj = JSON.parse(localStorage.getItem(dateObj.year));\n\n    if (Array.isArray(retrivedObj)) {\n      retrivedObj.push(finalObj);\n      let objForSaving = JSON.stringify(retrivedObj);\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else if (dateObj.year in localStorage) {\n      console.log(retrivedObj);\n      let x = new Array();\n      console.log(typeof x);\n\n      x.push(retrivedObj);\n\n      x.push(finalObj);\n      let objForSaving = JSON.stringify(x);\n\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else {\n      let x = [];\n      let storageArr = JSON.stringify(finalObj);\n      console.log(storageArr);\n      localStorage.setItem(dateObj.year, storageArr);\n    }\n    setChangeOfH(!chageOfH);\n    /// indicate change for second page\n    onAddedTime();\n    console.log(\"to mi treba tommy\");\n  };\n  ///////////////////////////////////////////////////////////////////////////////////////\n  const backName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n    console.log(curIndex);\n\n    if (curIndex - 1 < 0) {\n      setCurJob(jobName[jobName.length - 1]);\n    } else {\n      setCurJob(jobName[curIndex - 1]);\n    }\n  };\n\n  const fowardName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n\n    if (curIndex + 1 > jobName.length - 1) {\n      setCurJob(jobName[0]);\n    } else {\n      setCurJob(jobName[curIndex + 1]);\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n  const jobDisplay = (\n    <div className=\"jobDispl\">\n      {jobName && jobName.length > 1 && (\n        <ArrowBackIosIcon\n          className=\"material-icons jobArrow\"\n          onClick={backName}\n        ></ArrowBackIosIcon>\n      )}\n\n      <h4 id=\"jN\">{curJob}</h4>\n      {jobName && jobName.length > 1 && (\n        <ArrowForwardIosIcon\n          className=\"material-icons jobArrow\"\n          onClick={fowardName}\n        ></ArrowForwardIosIcon>\n      )}\n    </div>\n  );\n  ////////////////////////////////////////////////////////////////////////////\n  const catchDropdown = () => {\n    setDisplaySwitch(!displaySwitch);\n  };\n\n  ///////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"FirstPage\">\n      {jobName && (\n        <div>\n          <button id=\"addJob\" onClick={addJobClick}>\n            Dodaj posao\n          </button>\n          <button id=\"removeJob\" onClick={deleteJobClick}>\n            Izbrisi posao\n          </button>\n        </div>\n      )}\n      {jobName ? jobDisplay : <NameJob catchName={catchName} />}\n      {addJob && <NameJob catchName={catchName} />}\n      {jobName && (\n        <animated.div style={springProps}>\n          <DateNav\n            catchData={catchData}\n            curJob={curJob}\n            catchD={catchDropdown}\n          />\n        </animated.div>\n      )}\n      {jobName && displaySwitch && (\n        <DisplayThisMonthHours curJob={curJob} change={chageOfH} />\n      )}\n    </div>\n  );\n}\n\nexport default FirstPage;\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\Page2.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\SecondPage.js",["233","234","235","236","237","238","239"],"import React, { useState, useEffect } from \"react\";\r\nimport MainDiv from \"./components2/MainDiv\";\r\nimport Delete from \"./components2/Delete\";\r\nimport NukeStorage from \"./components2/NukeStorage\";\r\nimport dropdown from \"../Icons/dropdown.png\";\r\nimport \"./styles2/styles.css\";\r\n\r\nconst SecondPage = ({ change, onAddedTime }) => {\r\n  const [toggleDropdown, setToggleDropdown] = useState(false);\r\n\r\n  /////////////////////////////getting JObs\r\n  /////////////////////////////////////////////////////////\r\n\r\n  const currentJob = localStorage.getItem(\"currentJob\");\r\n  //////////////////////////////\r\n  /////////Need to set cur job so it changes before usefeect for getting relevan array\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n  const dateObj = new Date();\r\n  const [curJob, setCurJob] = useState(currentJob);\r\n  const [linkEffect, setLinkEffect] = useState(false);\r\n  const [month, setMonth] = useState(dateObj.getMonth() + 1);\r\n  const [relevantShifts, setRelevantShifts] = useState([]);\r\n\r\n  ///////////////////////////////////////////////////////////////////\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    setCurJob(() => currentJob);\r\n    setRelevantShifts(() => []);\r\n    console.log(\"masta\");\r\n    setLinkEffect(!linkEffect);\r\n  }, [change]);\r\n  ////////////////////////////////////////////////////////////\r\n  const monthsWorked = new Set();\r\n\r\n  //////////////// populate dropdown with avaliable months /////////////////////////////////////////\r\n  if (retriveArr) {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === currentJob) {\r\n          monthsWorked.add(ele.month);\r\n        }\r\n      });\r\n    } else {\r\n      monthsWorked.add(retriveArr.month);\r\n    }\r\n  }\r\n  /////////////////////////////\r\n  const newMonthArr = [];\r\n\r\n  monthsWorked.forEach((ele) => newMonthArr.push(parseInt(ele)));\r\n\r\n  console.log(monthsWorked);\r\n\r\n  newMonthArr.sort((a, b) => a - b);\r\n\r\n  console.log(newMonthArr);\r\n  ///////////////////////////////udating relevant data when month change or user inputs something on first page/////////////////////////////////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === curJob && ele.month === month) {\r\n          setRelevantShifts((relevantShifts) => [...relevantShifts, ele]);\r\n        }\r\n      });\r\n    } else if (retriveArr) {\r\n      if (retriveArr.job === curJob && retriveArr.month === month) {\r\n        setRelevantShifts([retriveArr]);\r\n      }\r\n    }\r\n  }, [month]);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === curJob && ele.month === month) {\r\n          setRelevantShifts((relevantShifts) => [...relevantShifts, ele]);\r\n          console.log(curJob);\r\n        }\r\n      });\r\n    } else if (retriveArr) {\r\n      if (retriveArr.job === curJob && retriveArr.month === month) {\r\n        setRelevantShifts([retriveArr]);\r\n        console.log(curJob);\r\n      }\r\n    } else {\r\n      setRelevantShifts([]);\r\n    }\r\n    console.log(\"kokikoki\");\r\n  }, [linkEffect]);\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  const dropDown = () => {\r\n    setToggleDropdown(!toggleDropdown);\r\n  };\r\n\r\n  const setClickedMonth = (e) => {\r\n    e.preventDefault(); // maybe\r\n    setMonth(parseInt(e.target.innerText));\r\n    if (month !== parseInt(e.target.innerText)) {\r\n      setRelevantShifts([]);\r\n    }\r\n    setToggleDropdown(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"curJob\">{curJob}</div>\r\n      <ul className=\"monthWhole\">\r\n        <li className=\"material-icons icons\" onClick={dropDown}>\r\n          <img src={dropdown} id=\"dropIcon\" />{\" \"}\r\n          <p id=\"dropMonths\">Mjesec {month}</p>\r\n        </li>\r\n        {toggleDropdown &&\r\n          newMonthArr.map((ele, ind) => (\r\n            <li key={ind} className=\"monthList\" onClick={setClickedMonth}>\r\n              {ele}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      {!toggleDropdown && <MainDiv data={relevantShifts} />}\r\n      <Delete relevantShifts={relevantShifts} onAddedTime={onAddedTime} />\r\n      <NukeStorage onAddedTime={onAddedTime} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SecondPage;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\DateNav.js",["240","241"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport HList from \"../components/HList\";\r\n\r\nimport \"../styles/mainStyle.css\";\r\n\r\nimport PopUp from \"./PopUp\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\n\r\nconst DateNav = ({ catchData, curJob, catchD }) => {\r\n  const [clickCount, setClickCount] = useState(0);\r\n\r\n  //////////DATE FORMARING//////////////////////////\r\n  //////////////////////////////////////////////////\r\n  const formatDate = (count) => {\r\n    const dateObj = new Date(),\r\n      dayNames = [\"Ned\", \"Pon\", \"Uto\", \"Sri\", \"Cet\", \"Pet\", \"Sub\"];\r\n    if (clickCount !== 0) {\r\n      console.log(\"dohvaceno\");\r\n      dateObj.setDate(new Date().getDate() + count);\r\n    }\r\n\r\n    return {\r\n      year: dateObj.getFullYear(),\r\n      day: dateObj.getDate(),\r\n      month: dateObj.getMonth() + 1,\r\n      dayName: dayNames[dateObj.getDay()],\r\n    };\r\n  };\r\n  //////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedDay, setSelectedDay] = useState(formatDate());\r\n  ///////////////////////////////////////////////////////////////\r\n  const [workHours, setWorkHours] = useState(undefined);\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedTimes, setSelectedTimes] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n  });\r\n  //////////////////////////////////////////////////////////////\r\n  const [popUpState, setPopUpState] = useState(false);\r\n\r\n  ////////////////////////ANIMATION///////////////////////////////////////\r\n\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  // settin the displayed date <_> clicking day back or foward is hooked with useEffect to change state\r\n  //witch is date displayed visualy\r\n\r\n  useEffect(() => {\r\n    setSelectedDay(formatDate(clickCount));\r\n  }, [clickCount]);\r\n\r\n  const dayFoward = () => {\r\n    setClickCount((count) => count + 1);\r\n  };\r\n\r\n  const dayBack = () => {\r\n    setClickCount((count) => count - 1);\r\n  };\r\n\r\n  /////////////JSX variables/////////////////////////////////\r\n\r\n  const backArrow = (\r\n    <ArrowBackIosIcon\r\n      style={{ fontSize: \"50px\", fontWeight: 100, opacity: 0.7 }}\r\n      className=\"material-icons timeArrow\"\r\n      onClick={dayBack}\r\n    ></ArrowBackIosIcon>\r\n  );\r\n\r\n  const fwdArrow = (\r\n    <ArrowForwardIosIcon\r\n      style={{ fontSize: \"50px\", fontWeight: 100, opacity: 0.7 }}\r\n      className=\"material-icons timeArrow\"\r\n      onClick={dayFoward}\r\n    ></ArrowForwardIosIcon>\r\n  );\r\n  /////////////////////////////////////////////////////////\r\n  const clickHour = (e) => {\r\n    if (!selectedTimes.startTime) {\r\n      setSelectedTimes({ ...selectedTimes, startTime: e.target.textContent });\r\n    } else if (!selectedTimes.endTime) {\r\n      // make unable to select end time lower than start time\r\n      if (parseInt(e.target.textContent) > parseInt(selectedTimes.startTime)) {\r\n        setSelectedTimes({ ...selectedTimes, endTime: e.target.textContent });\r\n      }\r\n    }\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      if (selectedTimes.endTime !== null) {\r\n        let derivedWorkHours = selectedTimes.endTime - selectedTimes.startTime;\r\n        setWorkHours(derivedWorkHours);\r\n      }\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [selectedTimes.endTime]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  const hoursChange = (e) => {\r\n    setWorkHours(e.target.value);\r\n  };\r\n\r\n  //////////////////////////////////\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      workHours > 24 ||\r\n      workHours < 0 ||\r\n      workHours === \"\" ||\r\n      workHours === undefined\r\n    ) {\r\n      alert(\"Netocno uneseni sati\");\r\n    } else if (workHours !== 0) {\r\n      catchData(selectedDay, workHours, selectedTimes);\r\n\r\n      setSelectedTimes({\r\n        startTime: null,\r\n        endTime: null,\r\n      });\r\n      /////////////////////////\r\n      setPopUpState(true);\r\n      setTimeout(() => {\r\n        setPopUpState(false);\r\n      }, 800);\r\n    }\r\n  };\r\n  /////////////////////////////////////////////\r\n  const clickDelete = () => {\r\n    setWorkHours(\"\");\r\n    setSelectedTimes({\r\n      startTime: null,\r\n      endTime: null,\r\n    });\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <div className=\"popUpWrapper\">\r\n        {popUpState ? <PopUp curJob={curJob} /> : <div></div>}\r\n      </div>\r\n      <div className=\"dateNav\">\r\n        {backArrow}\r\n\r\n        <span id=\"animateDate\">{`${selectedDay.dayName}, ${selectedDay.day}/${selectedDay.month}`}</span>\r\n        {fwdArrow}\r\n      </div>\r\n      <div className=\"flexWrapNav\">\r\n        <input\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          className=\"inputField\"\r\n          name=\"workHours\"\r\n          placeholder=\"Radni sati\"\r\n          value={workHours}\r\n          onChange={hoursChange}\r\n          style={{ display: \"block\" }}\r\n          onKeyDown={(evt) =>\r\n            [\"e\", \"E\", \"+\", \"-\", \".\"].includes(evt.key) && evt.preventDefault()\r\n          }\r\n        />\r\n        <br />\r\n        <div className=\"flexWrapButtons\">\r\n          <input\r\n            type=\"submit\"\r\n            onClick={onSubmit}\r\n            value=\"Save\"\r\n            id=\"save\"\r\n            className=\"buttons\"\r\n          />\r\n\r\n          <button id=\"delete\" onClick={clickDelete} className=\"buttons\">\r\n            Del\r\n          </button>\r\n        </div>\r\n        <div className=\"hourPad\">\r\n          <HList\r\n            clickHour={clickHour}\r\n            selectedTimes={selectedTimes}\r\n            catchD={catchD}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DateNav;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\DisplayThisMonthHours.js",["242","243"],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\MainDiv.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\Delete.js",["244","245","246"],"import React, { useState, useEffect } from \"react\";\r\nimport deleteIcon from \"../../Icons/deleteIcon.png\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst Delete = ({ relevantShifts, onAddedTime }) => {\r\n  const [clickedDel, setClickedDel] = useState(false);\r\n  const [deleteInput, setDeleteInput] = useState(undefined);\r\n  const [forSaving, setForSaving] = useState([]);\r\n  const dateObj = new Date();\r\n\r\n  useEffect(() => {\r\n    if (forSaving && forSaving.length > 0) {\r\n      let objForSaving = JSON.stringify(forSaving);\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      localStorage.setItem(dateObj.getFullYear(), objForSaving);\r\n      onAddedTime();\r\n      setDeleteInput(undefined);\r\n    } else if (forSaving === undefined) {\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      onAddedTime();\r\n    }\r\n  }, [forSaving]);\r\n\r\n  const firstClickDel = () => {\r\n    setForSaving([]);\r\n    console.log(relevantShifts.length);\r\n    console.log(parseInt(deleteInput));\r\n    if (parseInt(deleteInput) <= relevantShifts.length) {\r\n      // delete that data, update page\r\n      delSelectedData(relevantShifts[parseInt(deleteInput) - 1]);\r\n\r\n      console.log(\"tu smo maci\");\r\n    }\r\n    setClickedDel(!clickedDel);\r\n  };\r\n\r\n  const numInput = (e) => {\r\n    setDeleteInput(e.target.value);\r\n  };\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const contentProps = useSpring({\r\n    opacity: clickedDel ? 1 : 0,\r\n    marginLeft: clickedDel ? 0 : -300,\r\n  });\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const delSelectedData = (data) => {\r\n    console.log(data);\r\n    const dateObj = new Date();\r\n    const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n    console.log(retriveArr);\r\n    if (Array.isArray(retriveArr) && retriveArr.length > 1) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (JSON.stringify(ele) !== JSON.stringify(data)) {\r\n          console.log(\"hit that\");\r\n          setForSaving((forSaving) => [...forSaving, ele]);\r\n        }\r\n      });\r\n    } else {\r\n      console.log(\"a moramo bit ovdi\");\r\n      setForSaving(undefined);\r\n\r\n      setDeleteInput(undefined);\r\n    }\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"deleteDiv\">\r\n      <img\r\n        src={deleteIcon}\r\n        className=\"material-icons icons\"\r\n        id=\"deleteIcon\"\r\n        onClick={firstClickDel}\r\n      ></img>\r\n      {clickedDel && (\r\n        <animated.input\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          className=\"inputField\"\r\n          id=\"delPlaceholder\"\r\n          name=\"workHours\"\r\n          placeholder=\"Br?\"\r\n          value={deleteInput}\r\n          onChange={numInput}\r\n          style={contentProps}\r\n          autoFocus={true}\r\n          onKeyDown={(evt) =>\r\n            [\"e\", \"E\", \"+\", \"-\", \"0\"].includes(evt.key) && evt.preventDefault()\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Delete;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\PopUp.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\HList.js",["247","248","249","250","251","252"],"import React, { useState } from \"react\";\r\nimport { useSpring, animated, useTransition } from \"react-spring\";\r\nimport clockBuilder from \"../Icons/clockBuilder.png\";\r\nimport eject from \"../Icons/eject.png\";\r\n// import EjectIcon from \"@material-ui/icons/Eject\";\r\n// import QueryBuilderIcon from \"@material-ui/icons/QueryBuilder\";\r\n\r\nimport \"../styles/mainStyle.css\";\r\n\r\nconst HList = ({ clickHour, selectedTimes, catchD }) => {\r\n  // const clickedBtn = (e) => {\r\n  //   clickHour\r\n  //   console.log(e.target.textContent);\r\n  // };\r\n\r\n  // create an array of jobe time stamps, for now\r\n  const arr = [];\r\n  ////////////////////////\r\n  const [displaySelector, changeDisplySelector] = useState(false);\r\n\r\n  /////////////////////////////ANIMATION///////////////////////////////////////\r\n  const props = useSpring({\r\n    config: { duration: 1250 },\r\n    opacity: 1,\r\n    from: { opacity: 0 },\r\n  });\r\n\r\n  const transitions = useTransition(displaySelector, null, {\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  });\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  const startStyle = {\r\n    backgroundColor: \"#5de6da\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const endStyle = {\r\n    backgroundColor: \"#ee3968\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const resetSyle = {\r\n    border: \"gray 1px solid\",\r\n    color: \"black\",\r\n    backgroundColor: \"#fafad2\",\r\n  };\r\n\r\n  const iconStyle = {\r\n    height: \"40px\",\r\n    width: \"40px\",\r\n    fontWeight: \"300\",\r\n    fontSize: \"37px\",\r\n    textAlign: \"center\",\r\n  };\r\n\r\n  /////////////////////////////////////////////////////\r\n  for (let i = 7; i <= 24; i++) {\r\n    if (i == selectedTimes.startTime) {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={startStyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else if (i == selectedTimes.endTime) {\r\n      arr.push(\r\n        <h1 onClick={clickHour} className=\"numberList\" style={endStyle} key={i}>\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={resetSyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    }\r\n  }\r\n\r\n  const hClick = () => {\r\n    changeDisplySelector(!displaySelector);\r\n    catchD();\r\n  };\r\n\r\n  return displaySelector ? (\r\n    transitions.map(\r\n      ({ item, key, props }) =>\r\n        item && (\r\n          <animated.div className=\"hourSelect\" key={key} style={props}>\r\n            {arr}\r\n\r\n            <img\r\n              src={eject}\r\n              className=\"hButton material-icons numberList \"\r\n              onClick={hClick}\r\n              style={resetSyle}\r\n            ></img>\r\n          </animated.div>\r\n        )\r\n    )\r\n  ) : (\r\n    <img\r\n      src={clockBuilder}\r\n      className=\"material-icons numberList hButton\"\r\n      onClick={hClick}\r\n      style={resetSyle}\r\n    ></img>\r\n  );\r\n};\r\n\r\nexport default HList;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js",[],["253","254"],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js",[],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\index.js",[],["255","256"],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\App.js",["257"],"import React, { useState } from \"react\";\r\nimport FirstPage from \"./FirstPage\";\r\nimport SecondPage from \"./seconPage/SecondPage\";\r\nimport Page2 from \"./components/Page2\";\r\nimport { HashRouter, Route, Link } from \"react-router-dom\";\r\nimport SwipeableRoutes from \"react-swipeable-routes\";\r\n\r\nconst App = () => {\r\n  // to indicate change in added time to pase change notification to second ppage\r\n  const [change, setChange] = useState(false);\r\n  // when you \"nuke\" delete all data, to delete jobs enered in state also\r\n  const [nukeAll, setNukeAll] = useState(false);\r\n\r\n  const onAddedTime = (nuke = false) => {\r\n    setChange(!change);\r\n    if (nuke) {\r\n      setNukeAll(!nukeAll);\r\n      console.log();\r\n    }\r\n  };\r\n  //  const FirstPage = <FirstPage onAddedTime={onAddedTime} />;\r\n  const dateObj = new Date();\r\n  const year = dateObj.getFullYear();\r\n  const retrivedObj = localStorage.getItem(year);\r\n\r\n  return (\r\n    <>\r\n      {/* conditional rendering so it dosent display table when there is no entry, this happens at the very start of use */}\r\n      {retrivedObj ? (\r\n        <HashRouter>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    nuke={nukeAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                path=\"/second\"\r\n                render={(props) => (\r\n                  <SecondPage\r\n                    {...props}\r\n                    change={change}\r\n                    onAddedTime={onAddedTime}\r\n                  />\r\n                )}\r\n              />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </HashRouter>\r\n      ) : (\r\n        <HashRouter>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    nuke={nukeAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route path=\"/second\" render={(props) => <Page2 />} />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </HashRouter>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\FirstPage.js",["258","259","260"],"import React, { useState, useEffect } from \"react\";\nimport DateNav from \"./components/DateNav\";\nimport NameJob from \"./components/addRenameJob/NameJob\";\nimport DisplayThisMonthHours from \"./components/DisplayThisMonthHours\";\nimport { useSpring, animated } from \"react-spring\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\n\nfunction FirstPage({ onAddedTime, nuke }) {\n  const [jobName, setJobName] = useState(null);\n  const [curJob, setCurJob] = useState(null);\n  const [addJob, setAddJob] = useState(false);\n  /// to force update on hours in a month\n  const [chageOfH, setChangeOfH] = useState(false);\n  // to toggle of display thismonthhours\n  const [displaySwitch, setDisplaySwitch] = useState(true);\n  /////////////////////Saving current job in local storage when changed for display on page 2\n  useEffect(() => {\n    localStorage.setItem(\"currentJob\", curJob);\n    /// indicate change for second page\n    /////////////////////////////////////\n    ///////////////////////////////////////\n    onAddedTime();\n  }, [curJob]);\n\n  useEffect(() => {\n    setJobName(null);\n    setCurJob(null);\n  }, [nuke]);\n\n  ///Retrivin Jobs from local storage on initial render\n  useEffect(() => {\n    const savedJobs = window.localStorage.getItem(\"jobs\");\n    console.log(savedJobs);\n    if (savedJobs) {\n      if (savedJobs.includes(\",\")) {\n        const array = savedJobs.split(\",\");\n        setJobName(array);\n        setCurJob(array[0]);\n      } else {\n        let x = [];\n        x.push(savedJobs);\n        setJobName(x);\n        setCurJob(savedJobs);\n      }\n    }\n  }, []);\n\n  //////////////////////initial animation\n  const springProps = useSpring({ opacity: addJob ? 0 : 1 });\n\n  //////////////////////////////////////////////////////////////////\n  const catchName = (name) => {\n    ///first check if name is enetered\n    /// check that there is no duplicates in name\n    if (name.length > 0) {\n      if (Array.isArray(jobName) && !jobName.includes(name)) {\n        setJobName([...jobName, name]);\n      } else if (!Array.isArray(jobName)) {\n        let x = [];\n        x.push(name);\n        setJobName(x);\n      } else {\n        /// show alert pointing why you cant enetr name\n        /// either you didnt type anything or name already exists\n        if (jobName.includes(name)) {\n          alert(\"Posao s tim imenom vec postoji\");\n        }\n      }\n      setCurJob(name);\n      setAddJob(false);\n    }\n  };\n\n  /////code for saving jobs from state in local storage\n\n  useEffect(() => {\n    if (jobName) {\n      localStorage.setItem(\"jobs\", jobName);\n    } else {\n      localStorage.removeItem(\"jobs\");\n    }\n  }, [jobName]);\n  //////////////////////////////////////////////////////////\n\n  const addJobClick = () => {\n    setAddJob(true);\n  };\n\n  const deleteJobClick = () => {\n    if (window.confirm(`Izbrisi ${curJob}?`)) {\n      if (jobName && jobName.length > 1) {\n        let filteredAry = jobName.filter((e) => e !== curJob);\n        setJobName(filteredAry);\n        setCurJob(filteredAry[0]);\n      } else {\n        setJobName(null);\n        setCurJob(null);\n      }\n    }\n  };\n  ////////////////////////////////////////////////////////\n  const catchData = (dateObj, workHours, startEndTime) => {\n    const finalObj = startEndTime.startTime\n      ? {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: startEndTime.startTime,\n          endTime: startEndTime.endTime,\n        }\n      : {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: \"#\",\n          endTime: \"#\",\n        };\n\n    const retrivedObj = JSON.parse(localStorage.getItem(dateObj.year));\n\n    if (Array.isArray(retrivedObj)) {\n      retrivedObj.push(finalObj);\n      let objForSaving = JSON.stringify(retrivedObj);\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else if (dateObj.year in localStorage) {\n      console.log(retrivedObj);\n      let x = new Array();\n      console.log(typeof x);\n\n      x.push(retrivedObj);\n\n      x.push(finalObj);\n      let objForSaving = JSON.stringify(x);\n\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else {\n      let x = [];\n      let storageArr = JSON.stringify(finalObj);\n      console.log(storageArr);\n      localStorage.setItem(dateObj.year, storageArr);\n    }\n    setChangeOfH(!chageOfH);\n    /// indicate change for second page\n    onAddedTime();\n    console.log(\"to mi treba tommy\");\n  };\n  ///////////////////////////////////////////////////////////////////////////////////////\n  const backName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n    console.log(curIndex);\n\n    if (curIndex - 1 < 0) {\n      setCurJob(jobName[jobName.length - 1]);\n    } else {\n      setCurJob(jobName[curIndex - 1]);\n    }\n  };\n\n  const fowardName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n\n    if (curIndex + 1 > jobName.length - 1) {\n      setCurJob(jobName[0]);\n    } else {\n      setCurJob(jobName[curIndex + 1]);\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n  const jobDisplay = (\n    <div className=\"jobDispl\">\n      {jobName && jobName.length > 1 && (\n        <ArrowBackIosIcon\n          className=\"material-icons jobArrow\"\n          onClick={backName}\n        ></ArrowBackIosIcon>\n      )}\n\n      <h4 id=\"jN\">{curJob}</h4>\n      {jobName && jobName.length > 1 && (\n        <ArrowForwardIosIcon\n          className=\"material-icons jobArrow\"\n          onClick={fowardName}\n        ></ArrowForwardIosIcon>\n      )}\n    </div>\n  );\n  ////////////////////////////////////////////////////////////////////////////\n  const catchDropdown = () => {\n    setDisplaySwitch(!displaySwitch);\n  };\n\n  ///////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"FirstPage\">\n      {jobName && !addJob && (\n        <div>\n          <button id=\"addJob\" onClick={addJobClick}>\n            Dodaj posao\n          </button>\n          <button id=\"removeJob\" onClick={deleteJobClick}>\n            Izbrisi posao\n          </button>\n        </div>\n      )}\n      {jobName ? jobDisplay : <NameJob catchName={catchName} />}\n      {addJob && <NameJob catchName={catchName} />}\n      {jobName && (\n        <animated.div style={springProps}>\n          <DateNav\n            catchData={catchData}\n            curJob={curJob}\n            catchD={catchDropdown}\n          />\n        </animated.div>\n      )}\n      {jobName && displaySwitch && (\n        <DisplayThisMonthHours curJob={curJob} change={chageOfH} />\n      )}\n    </div>\n  );\n}\n\nexport default FirstPage;\n","C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\Page2.js",[],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\SecondPage.js",["261","262","263","264","265","266","267"],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\DisplayThisMonthHours.js",["268","269"],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\DateNav.js",["270","271"],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\MainDiv.js",[],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js",[],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\Delete.js",["272","273","274"],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\PopUp.js",[],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\components\\HList.js",["275","276","277","278","279","280"],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js",[],"C:\\Users\\Exo\\Desktop\\build\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js",[],["281","282"],{"ruleId":"283","replacedBy":"284"},{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","severity":1,"message":"288","line":5,"column":42,"nodeType":"289","messageId":"290","endLine":5,"endColumn":46},{"ruleId":"291","severity":1,"message":"292","line":51,"column":6,"nodeType":"293","endLine":51,"endColumn":18,"suggestions":"294"},{"ruleId":"291","severity":1,"message":"295","line":98,"column":6,"nodeType":"293","endLine":98,"endColumn":29,"suggestions":"296"},{"ruleId":"287","severity":1,"message":"297","line":17,"column":9,"nodeType":"289","messageId":"290","endLine":17,"endColumn":14},{"ruleId":"298","severity":1,"message":"299","line":49,"column":11,"nodeType":"300","messageId":"301","endLine":49,"endColumn":13},{"ruleId":"298","severity":1,"message":"299","line":60,"column":18,"nodeType":"300","messageId":"301","endLine":60,"endColumn":20},{"ruleId":"287","severity":1,"message":"302","line":1,"column":17,"nodeType":"289","messageId":"290","endLine":1,"endColumn":25},{"ruleId":"303","severity":1,"message":"304","line":11,"column":31,"nodeType":"305","messageId":"306","endLine":11,"endColumn":33},{"ruleId":"291","severity":1,"message":"307","line":22,"column":6,"nodeType":"293","endLine":22,"endColumn":14,"suggestions":"308"},{"ruleId":"309","severity":1,"message":"310","line":130,"column":15,"nodeType":"311","messageId":"312","endLine":130,"endColumn":26},{"ruleId":"287","severity":1,"message":"313","line":140,"column":11,"nodeType":"289","messageId":"290","endLine":140,"endColumn":12},{"ruleId":"291","severity":1,"message":"314","line":33,"column":6,"nodeType":"293","endLine":33,"endColumn":14,"suggestions":"315"},{"ruleId":"303","severity":1,"message":"304","line":40,"column":33,"nodeType":"305","messageId":"306","endLine":40,"endColumn":35},{"ruleId":"303","severity":1,"message":"304","line":63,"column":33,"nodeType":"305","messageId":"306","endLine":63,"endColumn":35},{"ruleId":"291","severity":1,"message":"316","line":73,"column":6,"nodeType":"293","endLine":73,"endColumn":13,"suggestions":"317"},{"ruleId":"303","severity":1,"message":"304","line":77,"column":33,"nodeType":"305","messageId":"306","endLine":77,"endColumn":35},{"ruleId":"291","severity":1,"message":"318","line":92,"column":6,"nodeType":"293","endLine":92,"endColumn":18,"suggestions":"319"},{"ruleId":"283","replacedBy":"320"},{"ruleId":"285","replacedBy":"321"},{"ruleId":"291","severity":1,"message":"322","line":21,"column":6,"nodeType":"293","endLine":21,"endColumn":17,"suggestions":"323"},{"ruleId":"303","severity":1,"message":"304","line":53,"column":33,"nodeType":"305","messageId":"306","endLine":53,"endColumn":35},{"ruleId":"283","replacedBy":"324"},{"ruleId":"285","replacedBy":"325"},{"ruleId":"287","severity":1,"message":"288","line":5,"column":42,"nodeType":"289","messageId":"290","endLine":5,"endColumn":46},{"ruleId":"291","severity":1,"message":"307","line":24,"column":6,"nodeType":"293","endLine":24,"endColumn":14,"suggestions":"326"},{"ruleId":"309","severity":1,"message":"310","line":132,"column":15,"nodeType":"311","messageId":"312","endLine":132,"endColumn":26},{"ruleId":"287","severity":1,"message":"313","line":142,"column":11,"nodeType":"289","messageId":"290","endLine":142,"endColumn":12},{"ruleId":"291","severity":1,"message":"314","line":34,"column":6,"nodeType":"293","endLine":34,"endColumn":14,"suggestions":"327"},{"ruleId":"303","severity":1,"message":"304","line":41,"column":33,"nodeType":"305","messageId":"306","endLine":41,"endColumn":35},{"ruleId":"303","severity":1,"message":"304","line":64,"column":33,"nodeType":"305","messageId":"306","endLine":64,"endColumn":35},{"ruleId":"291","severity":1,"message":"316","line":74,"column":6,"nodeType":"293","endLine":74,"endColumn":13,"suggestions":"328"},{"ruleId":"303","severity":1,"message":"304","line":78,"column":33,"nodeType":"305","messageId":"306","endLine":78,"endColumn":35},{"ruleId":"291","severity":1,"message":"318","line":93,"column":6,"nodeType":"293","endLine":93,"endColumn":18,"suggestions":"329"},{"ruleId":"330","severity":1,"message":"331","line":114,"column":11,"nodeType":"332","endLine":114,"endColumn":47},{"ruleId":"291","severity":1,"message":"292","line":53,"column":6,"nodeType":"293","endLine":53,"endColumn":18,"suggestions":"333"},{"ruleId":"291","severity":1,"message":"295","line":104,"column":6,"nodeType":"293","endLine":104,"endColumn":29,"suggestions":"334"},{"ruleId":"287","severity":1,"message":"302","line":1,"column":17,"nodeType":"289","messageId":"290","endLine":1,"endColumn":25},{"ruleId":"303","severity":1,"message":"304","line":11,"column":31,"nodeType":"305","messageId":"306","endLine":11,"endColumn":33},{"ruleId":"291","severity":1,"message":"322","line":22,"column":6,"nodeType":"293","endLine":22,"endColumn":17,"suggestions":"335"},{"ruleId":"303","severity":1,"message":"304","line":54,"column":33,"nodeType":"305","messageId":"306","endLine":54,"endColumn":35},{"ruleId":"330","severity":1,"message":"331","line":74,"column":7,"nodeType":"332","endLine":79,"endColumn":8},{"ruleId":"287","severity":1,"message":"297","line":22,"column":9,"nodeType":"289","messageId":"290","endLine":22,"endColumn":14},{"ruleId":"287","severity":1,"message":"336","line":53,"column":9,"nodeType":"289","messageId":"290","endLine":53,"endColumn":18},{"ruleId":"298","severity":1,"message":"299","line":63,"column":11,"nodeType":"300","messageId":"301","endLine":63,"endColumn":13},{"ruleId":"298","severity":1,"message":"299","line":74,"column":18,"nodeType":"300","messageId":"301","endLine":74,"endColumn":20},{"ruleId":"330","severity":1,"message":"331","line":106,"column":13,"nodeType":"332","endLine":111,"endColumn":14},{"ruleId":"330","severity":1,"message":"331","line":116,"column":5,"nodeType":"332","endLine":121,"endColumn":6},{"ruleId":"283","replacedBy":"337"},{"ruleId":"285","replacedBy":"338"},{"ruleId":"283","replacedBy":"339"},{"ruleId":"285","replacedBy":"340"},{"ruleId":"287","severity":1,"message":"288","line":5,"column":29,"nodeType":"289","messageId":"290","endLine":5,"endColumn":33},{"ruleId":"291","severity":1,"message":"307","line":24,"column":6,"nodeType":"293","endLine":24,"endColumn":14,"suggestions":"341"},{"ruleId":"309","severity":1,"message":"310","line":132,"column":15,"nodeType":"311","messageId":"312","endLine":132,"endColumn":26},{"ruleId":"287","severity":1,"message":"313","line":142,"column":11,"nodeType":"289","messageId":"290","endLine":142,"endColumn":12},{"ruleId":"291","severity":1,"message":"314","line":34,"column":6,"nodeType":"293","endLine":34,"endColumn":14,"suggestions":"342"},{"ruleId":"303","severity":1,"message":"304","line":41,"column":33,"nodeType":"305","messageId":"306","endLine":41,"endColumn":35},{"ruleId":"303","severity":1,"message":"304","line":64,"column":33,"nodeType":"305","messageId":"306","endLine":64,"endColumn":35},{"ruleId":"291","severity":1,"message":"316","line":74,"column":6,"nodeType":"293","endLine":74,"endColumn":13,"suggestions":"343"},{"ruleId":"303","severity":1,"message":"304","line":78,"column":33,"nodeType":"305","messageId":"306","endLine":78,"endColumn":35},{"ruleId":"291","severity":1,"message":"318","line":93,"column":6,"nodeType":"293","endLine":93,"endColumn":18,"suggestions":"344"},{"ruleId":"330","severity":1,"message":"331","line":114,"column":11,"nodeType":"332","endLine":114,"endColumn":47},{"ruleId":"287","severity":1,"message":"302","line":1,"column":17,"nodeType":"289","messageId":"290","endLine":1,"endColumn":25},{"ruleId":"303","severity":1,"message":"304","line":11,"column":31,"nodeType":"305","messageId":"306","endLine":11,"endColumn":33},{"ruleId":"291","severity":1,"message":"292","line":53,"column":6,"nodeType":"293","endLine":53,"endColumn":18,"suggestions":"345"},{"ruleId":"291","severity":1,"message":"295","line":104,"column":6,"nodeType":"293","endLine":104,"endColumn":29,"suggestions":"346"},{"ruleId":"291","severity":1,"message":"322","line":22,"column":6,"nodeType":"293","endLine":22,"endColumn":17,"suggestions":"347"},{"ruleId":"303","severity":1,"message":"304","line":54,"column":33,"nodeType":"305","messageId":"306","endLine":54,"endColumn":35},{"ruleId":"330","severity":1,"message":"331","line":74,"column":7,"nodeType":"332","endLine":79,"endColumn":8},{"ruleId":"287","severity":1,"message":"297","line":22,"column":9,"nodeType":"289","messageId":"290","endLine":22,"endColumn":14},{"ruleId":"287","severity":1,"message":"336","line":53,"column":9,"nodeType":"289","messageId":"290","endLine":53,"endColumn":18},{"ruleId":"298","severity":1,"message":"299","line":63,"column":11,"nodeType":"300","messageId":"301","endLine":63,"endColumn":13},{"ruleId":"298","severity":1,"message":"299","line":74,"column":18,"nodeType":"300","messageId":"301","endLine":74,"endColumn":20},{"ruleId":"330","severity":1,"message":"331","line":106,"column":13,"nodeType":"332","endLine":111,"endColumn":14},{"ruleId":"330","severity":1,"message":"331","line":116,"column":5,"nodeType":"332","endLine":121,"endColumn":6},{"ruleId":"283","replacedBy":"348"},{"ruleId":"285","replacedBy":"349"},"no-native-reassign",["350"],"no-negated-in-lhs",["351"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatDate'. Either include it or remove the dependency array.","ArrayExpression",["352"],"React Hook useEffect has a missing dependency: 'selectedTimes.startTime'. Either include it or remove the dependency array.",["353"],"'props' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'onAddedTime'. Either include it or remove the dependency array. If 'onAddedTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["354"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'x' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentJob' and 'linkEffect'. Either include them or remove the dependency array. You can also do a functional update 'setLinkEffect(l => ...)' if you only need 'linkEffect' in the 'setLinkEffect' call.",["355"],"React Hook useEffect has missing dependencies: 'curJob' and 'retriveArr'. Either include them or remove the dependency array.",["356"],"React Hook useEffect has missing dependencies: 'curJob', 'month', and 'retriveArr'. Either include them or remove the dependency array.",["357"],["350"],["351"],"React Hook useEffect has missing dependencies: 'dateObj' and 'onAddedTime'. Either include them or remove the dependency array. If 'onAddedTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["358"],["350"],["351"],["359"],["360"],["361"],["362"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["363"],["364"],["365"],"'iconStyle' is assigned a value but never used.",["350"],["351"],["350"],["351"],["366"],["367"],["368"],["369"],["370"],["371"],["372"],["350"],["351"],"no-global-assign","no-unsafe-negation",{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"377","fix":"387"},{"desc":"379","fix":"388"},{"desc":"381","fix":"389"},{"desc":"383","fix":"390"},{"desc":"373","fix":"391"},{"desc":"375","fix":"392"},{"desc":"385","fix":"393"},{"desc":"377","fix":"394"},{"desc":"379","fix":"395"},{"desc":"381","fix":"396"},{"desc":"383","fix":"397"},{"desc":"373","fix":"398"},{"desc":"375","fix":"399"},{"desc":"385","fix":"400"},"Update the dependencies array to be: [clickCount, formatDate]",{"range":"401","text":"402"},"Update the dependencies array to be: [selectedTimes.endTime, selectedTimes.startTime]",{"range":"403","text":"404"},"Update the dependencies array to be: [curJob, onAddedTime]",{"range":"405","text":"406"},"Update the dependencies array to be: [change, currentJob, linkEffect]",{"range":"407","text":"408"},"Update the dependencies array to be: [curJob, month, retriveArr]",{"range":"409","text":"410"},"Update the dependencies array to be: [curJob, linkEffect, month, retriveArr]",{"range":"411","text":"412"},"Update the dependencies array to be: [dateObj, forSaving, onAddedTime]",{"range":"413","text":"414"},{"range":"415","text":"406"},{"range":"416","text":"408"},{"range":"417","text":"410"},{"range":"418","text":"412"},{"range":"419","text":"402"},{"range":"420","text":"404"},{"range":"421","text":"414"},{"range":"422","text":"406"},{"range":"423","text":"408"},{"range":"424","text":"410"},{"range":"425","text":"412"},{"range":"426","text":"402"},{"range":"427","text":"404"},{"range":"428","text":"414"},[1802,1814],"[clickCount, formatDate]",[3246,3269],"[selectedTimes.endTime, selectedTimes.startTime]",[970,978],"[curJob, onAddedTime]",[1350,1358],"[change, currentJob, linkEffect]",[2664,2671],"[curJob, month, retriveArr]",[3229,3241],"[curJob, linkEffect, month, retriveArr]",[794,805],"[dateObj, forSaving, onAddedTime]",[1104,1112],[1397,1405],[2711,2718],[3276,3288],[1938,1950],[3551,3574],[848,859],[1104,1112],[1397,1405],[2711,2718],[3276,3288],[1938,1950],[3551,3574],[848,859]]